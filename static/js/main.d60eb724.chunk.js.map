{"version":3,"sources":["bootstrap/serviceWorkerRegistration.ts","bootstrap/reportWebVitals.ts","Scene/GameObject.ts","Scene/Scene.ts","Raycaster/Grid.ts","Raycaster/Player/Control.ts","Raycaster/Player/Player.ts","Raycaster/Ray.ts","levels/level1.ts","Raycaster/Raycaster.ts","Raycaster/utils.ts","render-strategies/DivRenderStrategy/DivRenderStrategy.tsx","render-strategies/DivRenderStrategyTextured/wallData.ts","render-strategies/DivRenderStrategyTextured/wall1.jpg","render-strategies/DivRenderStrategyTextured/wall2.jpg","render-strategies/DivRenderStrategyTextured/wall3.jpg","render-strategies/DivRenderStrategyTextured/DivRenderStrategyTextured.tsx","render-strategies/TextRenderStrategy/TextRenderStrategy.tsx","render-strategies/ConsoleRenderStrategy/devtools.jpeg","render-strategies/ConsoleRenderStrategy/ConsoleRenderStrategy.tsx","Settings.ts","utils/angle.ts","utils/index.ts","components/UiMap/PlayerMarker.tsx","components/UiMap/Line.tsx","components/UiMap/RayHits.tsx","components/UiMap/UiMap.tsx","App.tsx","bootstrap/index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameObject","started","Scene","getInstance","subscribe","this","subscribers","setInterval","update","forEach","subscriber","isStarted","start","push","index","findIndex","el","splice","instance","Grid","data","tileSize","grid","position","gridPosition","convertPositionToGridPosition","cell","Math","floor","y","x","floatPart","distanceTop","distanceLeft","distanceData","side","value","point","collisionSide","maxBy","Control","MOUSE_SENSITIVITY","ROTATION_SPEED","moveState","toForward","toBack","rotateLeft","rotateRight","attachKeyDown","attachKeyUp","document","body","addEventListener","event","code","Player","rotation","walkSpeed","rotationSpeed","Angle","toRad","radius","control","multiplier","vector","cos","sin","moveBy","newPosition","handleCollision","Ray","angle","isRayFacingDown","isRayFacingUp","isRayFacingRight","isRayFacingLeft","collision","hitDistance","isVerticalCast","isHorizontalCast","stripHeight","maxDistance","player","normalize","PI","horizontalCollision","castHorizontal","verticalCollision","castVertical","horizontalDistance","calculateDistance","Number","MAX_VALUE","verticalDistance","yIntercept","xIntercept","yStep","xStep","tan","nextHorizontalTouchX","nextHorizontalTouchY","nextVerticalTouchX","nextVerticalTouchY","distance","rayPoint","level","Raycaster","FOV","raysCount","rays","setData","level1","anglePerRay","startAngle","columnId","ray","cast","count","usePlayerPosition","useState","playerPosition","setPlayerPosition","useEffect","scene","raycaster","unsubscribe","useRays","setRays","DivRenderStrategy","viewport","useViewport","stripWidth","width","className","map","rgbMax","colorValue","limit","height","backgroundColor","style","left","top","wallData","DivRenderStrategyTextured","textureMove","backgroundImage","backgroundSize","backgroundPositionX","opacity","TextRenderStrategy","previousRaysCount","setRaysCount","Settings","consoleRaysCount","viewportWidthToCharsScaleCoefficient","length","viewportHeightToCharsScaleCoefficient","charArray","charHeight","round","normalizedCharHeight","Array","from","fill","getCharByStripHeight","emptyCellsCount","topEmptyCellsCount","ceil","bottomEmptyCellsCount","i","unshift","str","rotate","join","rows","readOnly","ConsoleRenderStrategy","renderedString","setRenderedString","consoleHeight","console","log","clear","src","devtoolsImg","viewPortSizeMultiplier","uiMapSizeMultiplier","textRenderCharSpectre","renderingStrategies","name","component","raysCountChangeAvailable","degrees","toDeg","radians","p1","p2","sqrt","maxHeight","charsSpectre","key","viewPort","useViewportCore","PlayerMarker","size","transform","Line","props","to","len","pow","atan","borderBottom","RayHits","UiMap","setDataData","setTileSize","useGrid","tilesSize","row","cellType","j","App","fov","setFov","renderStrategy","setRenderStrategy","init","onChange","strategy","find","target","autoFocus","type","min","max","step","e","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d60eb724.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Scene from \"./Scene\";\n\nabstract class GameObject {\n  private started: boolean = false;\n\n  constructor() {\n    const scene = Scene.getInstance();\n\n    scene.subscribe(this);\n  }\n\n  public start(): void {\n    this.started = true;\n  }\n\n  public isStarted() {\n    return this.started;\n  }\n\n  public abstract update(): void;\n}\n\nexport default GameObject;\n","import GameObject from \"./GameObject\";\n\nimport { Subscriber } from \"./types\";\n\nclass Scene {\n  private subscribers: Subscriber[] = [];\n\n  public init() {\n    setInterval(() => this.update(), 10);\n  }\n\n  public update() {\n    this.subscribers.forEach((subscriber) => {\n      if (subscriber instanceof GameObject) {\n        if (!subscriber.isStarted()) subscriber.start();\n\n        subscriber.update();\n      } else {\n        subscriber();\n      }\n    });\n  }\n\n  public subscribe(subscriber: Subscriber): void {\n    this.subscribers.push(subscriber);\n  }\n  public unsubscribe(subscriber: Subscriber) {\n    const index = this.subscribers.findIndex((el) => subscriber === el);\n\n    this.subscribers.splice(index, 1);\n  }\n\n  private static instance: Scene;\n\n  public static getInstance(): Scene {\n    if (this.instance) return this.instance;\n\n    this.instance = new Scene();\n\n    return this.instance;\n  }\n}\n\nexport default Scene;\n","import maxBy from \"lodash/maxBy\";\n\nimport { Collision, Side } from \"./types\";\n\nclass Grid {\n  public data: CellGrid = null;\n  public readonly tileSize: number = 32;\n\n  private constructor() {}\n\n  public setData(grid: CellGrid): void {\n    this.data = grid;\n  }\n\n  public handleCollision(position: Position): Collision | null {\n    const gridPosition = this.convertPositionToGridPosition(position);\n\n    const cell =\n      this.data?.[Math.floor(gridPosition.y)]?.[Math.floor(gridPosition.x)];\n\n    const collisionExist = cell !== 0;\n    if (!collisionExist) return null;\n\n    const floatPart = { x: gridPosition.x % 1, y: gridPosition.y % 1 };\n\n    const distanceTop = floatPart.y;\n    const distanceBottom = 1 - distanceTop;\n    const distanceLeft = floatPart.x;\n    const distanceRight = 1 - distanceLeft;\n\n    const distanceData: { side: Side; value: number }[] = [\n      { side: \"top\", value: distanceTop },\n      { side: \"bottom\", value: distanceBottom },\n      { side: \"left\", value: distanceLeft },\n      { side: \"right\", value: distanceRight },\n    ];\n\n    const { side } = maxBy(distanceData, \"value\");\n\n    return {\n      point: position,\n      gridPosition,\n      floatPart,\n      cell,\n      collisionSide: side,\n    };\n  }\n\n  private convertPositionToGridPosition(position: Position): Position {\n    return {\n      x: position.x / this.tileSize,\n      y: position.y / this.tileSize,\n    };\n  }\n\n  private static instance: Grid;\n  public static getInstance(): Grid {\n    if (this.instance) return this.instance;\n\n    this.instance = new Grid();\n\n    return this.instance;\n  }\n}\n\nexport default Grid;\n","class Control {\n  public readonly MOUSE_SENSITIVITY = 1.5;\n  public readonly ROTATION_SPEED = 2;\n\n  public moveState = {\n    toForward: false,\n    toBack: false,\n    rotateLeft: false,\n    rotateRight: false,\n  };\n\n  public constructor() {\n    this.attachKeyDown();\n    this.attachKeyUp();\n  }\n\n  private attachKeyDown(): void {\n    document.body.addEventListener(\"keydown\", (event) => {\n      const { code } = event;\n\n      if (code === \"KeyW\") this.moveState.toForward = true;\n      if (code === \"KeyS\") this.moveState.toBack = true;\n      if (code === \"KeyA\") this.moveState.rotateLeft = true;\n      if (code === \"KeyD\") this.moveState.rotateRight = true;\n    });\n  }\n\n  private attachKeyUp(): void {\n    document.body.addEventListener(\"keyup\", (event) => {\n      const { code } = event;\n\n      if (code === \"KeyW\") this.moveState.toForward = false;\n      if (code === \"KeyS\") this.moveState.toBack = false;\n      if (code === \"KeyA\") this.moveState.rotateLeft = false;\n      if (code === \"KeyD\") this.moveState.rotateRight = false;\n    });\n  }\n}\n\nexport default Control;\n","import { Angle } from \"../../utils\";\n\nimport { GameObject } from \"../../Scene\";\nimport Grid from \"../Grid\";\n\nimport Control from \"./Control\";\n\nclass Player extends GameObject {\n  // public position: Position = {\n  //   x: 150,\n  //   y: 150,\n  //   rotation: Math.PI / 2,\n  // };\n\n  public position: Position = {\n    x: 155.15374267341303,\n    y: 141.63397544881818,\n    rotation: -1.8500490071139923,\n  };\n\n  public readonly walkSpeed = 1;\n  public readonly rotationSpeed = Angle.toRad(2);\n\n  public readonly radius = 8;\n\n  private readonly control = new Control();\n\n  public update() {\n    const { rotateLeft, rotateRight, toForward, toBack } =\n      this.control.moveState;\n\n    if (rotateLeft || rotateRight) {\n      const multiplier = rotateRight ? 1 : -1;\n\n      this.position = {\n        ...this.position,\n        rotation: this.position.rotation + this.rotationSpeed * multiplier,\n      };\n    }\n\n    if (toForward || toBack) {\n      const multiplier = toForward ? 1 : -1;\n\n      const vector = {\n        x: Math.cos(this.position.rotation) * this.walkSpeed * multiplier,\n        y: Math.sin(this.position.rotation) * this.walkSpeed * multiplier,\n      };\n\n      this.moveBy(vector);\n    }\n  }\n\n  public moveBy(vector: Position): void {\n    const grid = Grid.getInstance();\n\n    const newPosition = {\n      ...this.position,\n      x: this.position.x + vector.x,\n      y: this.position.y + vector.y,\n    };\n\n    if (grid.handleCollision(newPosition)) return;\n\n    this.position = newPosition;\n  }\n\n  private static instance: Player;\n  public static getInstance(): Player {\n    if (this.instance) return this.instance;\n\n    this.instance = new Player();\n\n    return this.instance;\n  }\n}\n\nexport default Player;\n","import { calculateDistance, Angle } from \"../utils\";\n\nimport Grid from \"./Grid\";\nimport Player from \"./Player\";\n\nimport { Collision } from \"./types\";\n\nclass Ray {\n  private readonly point: Position;\n  public readonly angle: number;\n\n  public isRayFacingDown: boolean;\n  public isRayFacingUp: boolean;\n  public isRayFacingRight: boolean;\n  public isRayFacingLeft: boolean;\n\n  public collision?: Collision;\n  public hitDistance?: number;\n  public isVerticalCast: boolean = false;\n  public isHorizontalCast: boolean = false;\n  public stripHeight: number = 0;\n\n  public readonly maxDistance: number = 300;\n\n  private readonly grid: Grid = Grid.getInstance();\n  private readonly player: Player = Player.getInstance();\n\n  constructor(point: Position, angle: number) {\n    this.angle = Angle.normalize(angle);\n    this.point = point;\n\n    this.isRayFacingDown = this.angle > 0 && this.angle < Math.PI;\n    this.isRayFacingUp = !this.isRayFacingDown;\n\n    this.isRayFacingRight =\n      this.angle < 0.5 * Math.PI || this.angle > 1.5 * Math.PI;\n    this.isRayFacingLeft = !this.isRayFacingRight;\n  }\n\n  public cast(): void {\n    const horizontalCollision = this.castHorizontal();\n    const verticalCollision = this.castVertical();\n\n    if (!horizontalCollision && !verticalCollision) return;\n\n    const horizontalDistance = horizontalCollision\n      ? calculateDistance(this.player.position, horizontalCollision.point)\n      : Number.MAX_VALUE;\n    const verticalDistance = verticalCollision\n      ? calculateDistance(this.player.position, verticalCollision.point)\n      : Number.MAX_VALUE;\n\n    if (horizontalDistance < verticalDistance) {\n      this.collision = horizontalCollision;\n      this.hitDistance = horizontalDistance;\n      this.isHorizontalCast = true;\n    } else if (verticalDistance <= horizontalDistance) {\n      this.collision = verticalCollision;\n      this.hitDistance = verticalDistance;\n      this.isVerticalCast = true;\n    }\n\n    const wallCoefficient = 10000;\n    this.stripHeight =\n      wallCoefficient /\n      (Math.cos(Player.getInstance().position.rotation - this.angle) *\n        this.hitDistance);\n  }\n\n  private castHorizontal(): Collision {\n    let yIntercept: number, xIntercept: number, yStep: number, xStep: number;\n\n    yIntercept =\n      Math.floor(this.player.position.y / this.grid.tileSize) *\n      this.grid.tileSize;\n    yIntercept += this.isRayFacingDown ? this.grid.tileSize : 0;\n\n    xIntercept =\n      this.player.position.x +\n      (yIntercept - this.player.position.y) / Math.tan(this.angle);\n\n    yStep = this.grid.tileSize;\n    yStep *= this.isRayFacingUp ? -1 : 1;\n\n    xStep = this.grid.tileSize / Math.tan(this.angle);\n    xStep *= this.isRayFacingLeft && xStep > 0 ? -1 : 1;\n    xStep *= this.isRayFacingRight && xStep < 0 ? -1 : 1;\n\n    let nextHorizontalTouchX = xIntercept;\n    let nextHorizontalTouchY = yIntercept;\n\n    while (\n      nextHorizontalTouchX >= 0 &&\n      nextHorizontalTouchX <= 2000 &&\n      nextHorizontalTouchY >= 0 &&\n      nextHorizontalTouchY <= 2000\n    ) {\n      const collision = this.grid.handleCollision({\n        x: nextHorizontalTouchX,\n        y: nextHorizontalTouchY - (this.isRayFacingUp ? 1 : 0),\n      });\n\n      if (collision) return collision;\n\n      nextHorizontalTouchX += xStep;\n      nextHorizontalTouchY += yStep;\n    }\n  }\n\n  private castVertical(): Collision {\n    let yIntercept: number, xIntercept: number, yStep: number, xStep: number;\n\n    xIntercept =\n      Math.floor(this.player.position.x / this.grid.tileSize) *\n      this.grid.tileSize;\n    xIntercept += this.isRayFacingRight ? this.grid.tileSize : 0;\n\n    yIntercept =\n      this.player.position.y +\n      (xIntercept - this.player.position.x) * Math.tan(this.angle);\n\n    xStep = this.grid.tileSize;\n    xStep *= this.isRayFacingLeft ? -1 : 1;\n\n    yStep = this.grid.tileSize * Math.tan(this.angle);\n    yStep *= this.isRayFacingUp && yStep > 0 ? -1 : 1;\n    yStep *= this.isRayFacingDown && yStep < 0 ? -1 : 1;\n\n    let nextVerticalTouchX = xIntercept;\n    let nextVerticalTouchY = yIntercept;\n\n    while (\n      nextVerticalTouchX >= 0 &&\n      nextVerticalTouchX <= 2000 &&\n      nextVerticalTouchY >= 0 &&\n      nextVerticalTouchY <= 2000\n    ) {\n      const collision = this.grid.handleCollision({\n        x: nextVerticalTouchX - (this.isRayFacingLeft ? 1 : 0),\n        y: nextVerticalTouchY,\n      });\n\n      if (collision) return collision;\n\n      nextVerticalTouchX += xStep;\n      nextVerticalTouchY += yStep;\n    }\n  }\n\n  /*\n    Old variant with \"brute force\" like ray hit checking\n  */\n  private castLegacy() {\n    const checkingDistance = 1 / 2;\n\n    let distance = 0;\n\n    while (distance < this.maxDistance) {\n      const vector: Position = {\n        x: Math.cos(this.angle) * distance,\n        y: Math.sin(this.angle) * distance,\n      };\n\n      const rayPoint: Position = {\n        x: this.point.x + vector.x,\n        y: this.point.y + vector.y,\n      };\n\n      const collision = this.grid.handleCollision(rayPoint);\n\n      if (collision) {\n        this.collision = collision;\n        this.hitDistance = calculateDistance(this.point, rayPoint);\n\n        this.stripHeight =\n          10000 /\n          (Math.cos(Player.getInstance().position.rotation - this.angle) *\n            this.hitDistance);\n\n        break;\n      }\n\n      distance += checkingDistance;\n    }\n  }\n}\n\nexport default Ray;\n","const level: CellGrid = [\n  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2],\n  [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2],\n  [2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 2],\n  [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2],\n  [1, 3, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 2],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\nexport default level;\n","import { Angle } from \"../utils\";\n\nimport { GameObject } from \"../Scene\";\n\nimport Player from \"./Player\";\nimport Grid from \"./Grid\";\nimport Ray from \"./Ray\";\n\nimport { level1 } from \"../levels\";\n\nclass Raycaster extends GameObject {\n  public FOV: number = Angle.toRad(60);\n  public raysCount: number = 160;\n\n  public player: Player = Player.getInstance();\n  public grid: Grid = Grid.getInstance();\n\n  public rays: Ray[] = [];\n\n  public start() {\n    super.start();\n\n    this.grid.setData(level1);\n  }\n\n  public update() {\n    this.rays = [];\n\n    const anglePerRay = this.FOV / this.raysCount;\n\n    const startAngle = this.player.position.rotation - this.FOV / 2;\n\n    for (let columnId = 0; columnId < this.raysCount; columnId++) {\n      const angle = startAngle + anglePerRay * columnId;\n\n      const ray = new Ray(this.player.position, angle);\n\n      ray.cast();\n\n      this.rays.push(ray);\n    }\n  }\n\n  public setRaysCount(count: number) {\n    this.raysCount = count;\n  }\n\n  private static instance: Raycaster;\n  public static getInstance(): Raycaster {\n    if (this.instance) return this.instance;\n\n    this.instance = new Raycaster();\n\n    return this.instance;\n  }\n}\n\nexport default Raycaster;\n","import { useState, useEffect } from \"react\";\n\nimport Scene from \"../Scene\";\nimport Raycaster from \"./Raycaster\";\nimport Ray from \"./Ray\";\n\nexport const useGrid = () => {\n  const [grid, setDataData] = useState<CellGrid>(null);\n  const [tileSize, setTileSize] = useState<number>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setDataData(raycaster.grid.data);\n      setTileSize(raycaster.grid.tileSize);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  if (!grid) return null;\n\n  return { data: grid, tileSize };\n};\n\nexport const usePlayerPosition = () => {\n  const [playerPosition, setPlayerPosition] = useState<Position>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setPlayerPosition(raycaster.player.position);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return playerPosition;\n};\n\nexport const useRays = () => {\n  const [rays, setRays] = useState<Ray[]>([]);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setRays(raycaster.rays);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return rays;\n};\n","import { useViewport, limit } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div className=\"div-render-strategy\">\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        const isShadedSide =\n          ray.collision.collisionSide === \"top\" ||\n          ray.collision.collisionSide === \"left\";\n        // const darkness =\n        //   (ray.stripHeight * 2) /\n        //   (isShadedSide ? viewport.height : viewport.height * 0.6);\n\n        const rgbMax = isShadedSide ? 170 : 100;\n        const colorValue = limit(\n          (rgbMax * ray.stripHeight) / viewport.height,\n          rgbMax\n        );\n\n        const backgroundColor = `rgb(${colorValue}, ${colorValue}, ${colorValue})`;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n              backgroundColor,\n            }}\n            key={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategy;\n","import wall1 from \"./wall1.jpg\";\nimport wall2 from \"./wall2.jpg\";\nimport wall3 from \"./wall3.jpg\";\n\nconst wallData = {\n  \"1\": wall1,\n  \"2\": wall2,\n  \"3\": wall3,\n};\n\nexport default wallData;\n","export default __webpack_public_path__ + \"static/media/wall1.2598404c.jpg\";","export default __webpack_public_path__ + \"static/media/wall2.c183bd8a.jpg\";","export default __webpack_public_path__ + \"static/media/wall3.708ac57b.jpg\";","import { useViewport, limit } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport wallData from \"./wallData\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategyTextured = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div className=\"div-render-strategy-textured\">\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        const float =\n          ray.collision.collisionSide === \"left\" ||\n          ray.collision.collisionSide === \"right\"\n            ? ray.collision.floatPart.y\n            : ray.collision.floatPart.x;\n\n        const textureMove = float * ray.stripHeight;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n            }}\n            key={index}\n          >\n            {/* <img\n              src={wallData[ray.collision.cell]}\n              style={{\n                height: ray.stripHeight,\n                width: ray.stripHeight,\n                left: -textureMove,\n                opacity: (ray.stripHeight * 2) / viewport.height,\n              }}\n            /> */}\n            <div\n              className=\"texture\"\n              style={{\n                backgroundImage: `url(${wallData[ray.collision.cell]})`,\n                height: ray.stripHeight,\n                width: ray.stripHeight,\n                backgroundSize: \"cover\",\n                backgroundPositionX: -textureMove,\n                opacity: (ray.stripHeight * 2) / viewport.height,\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategyTextured;\n","import { useEffect } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { useViewport, getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst TextRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  useEffect(() => {\n    const previousRaysCount = raycaster.raysCount;\n\n    raycaster.setRaysCount(Settings.consoleRaysCount);\n\n    return () => raycaster.setRaysCount(previousRaysCount);\n  }, []);\n  useEffect(() => {\n    raycaster.setRaysCount(\n      Math.floor(viewport.width * Settings.viewportWidthToCharsScaleCoefficient)\n    );\n  }, [viewport.width]);\n\n  if (!rays.length) return null;\n\n  const height = Math.floor(\n    viewport.height * Settings.viewportHeightToCharsScaleCoefficient\n  );\n\n  const charArray = rays.map((ray) => {\n    const stripHeightCoefficient = 480;\n\n    const charHeight = Math.round(\n      (ray.stripHeight / stripHeightCoefficient) * height\n    );\n    const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n    const charArray = Array.from({ length: normalizedCharHeight }).fill(\n      getCharByStripHeight(normalizedCharHeight, height)\n    );\n\n    const emptyCellsCount = height - normalizedCharHeight;\n\n    const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n    const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n    for (let i = 0; i < topEmptyCellsCount; i++) {\n      charArray.push(\" \");\n    }\n    for (let i = 0; i < bottomEmptyCellsCount; i++) {\n      charArray.unshift(\"_\");\n    }\n\n    return charArray;\n  });\n\n  const rotatedCharArray = rotate(charArray, 270);\n\n  const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n  return (\n    <div className=\"text-render-strategy\">\n      <textarea value={str} rows={height} readOnly />\n    </div>\n  );\n};\n\nexport default TextRenderStrategy;\n","export default __webpack_public_path__ + \"static/media/devtools.39991061.jpeg\";","import { useEffect, useState } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\nimport { useViewport } from \"../../utils\";\n\nimport devtoolsImg from \"./devtools.jpeg\";\n\nimport \"./style.scss\";\n\nconst ConsoleRenderStrategy = () => {\n  const [renderedString, setRenderedString] = useState<string>(null);\n\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  useEffect(() => {\n    const previousRaysCount = raycaster.raysCount;\n\n    raycaster.setRaysCount(Settings.consoleRaysCount);\n\n    return () => raycaster.setRaysCount(previousRaysCount);\n  }, []);\n\n  const height = Math.floor(Settings.consoleHeight);\n\n  useEffect(() => {\n    if (!rays.length) return null;\n\n    const charArray = rays.map((ray) => {\n      const stripHeightCoefficient = 480;\n\n      const charHeight = Math.round(\n        (ray.stripHeight / stripHeightCoefficient) * height\n      );\n      const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n      const charArray = Array.from({ length: normalizedCharHeight }).fill(\n        getCharByStripHeight(normalizedCharHeight, height)\n      );\n\n      const emptyCellsCount = height - normalizedCharHeight;\n\n      const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n      const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n      for (let i = 0; i < topEmptyCellsCount; i++) {\n        charArray.push(\" \");\n      }\n      for (let i = 0; i < bottomEmptyCellsCount; i++) {\n        charArray.unshift(\"_\");\n      }\n\n      return charArray;\n    });\n\n    const rotatedCharArray = rotate(charArray, 270);\n\n    const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n    setRenderedString(str);\n  }, [rays]);\n\n  useEffect(() => {\n    if (renderedString) console.log(renderedString);\n  }, [renderedString]);\n\n  useEffect(() => {\n    return () => console.clear();\n  }, []);\n\n  return (\n    <div className=\"console-render-strategy\">\n      <div className=\"description\">\n        <h3>Open browser console</h3>\n        <img src={devtoolsImg} width={viewport.width} />\n      </div>\n    </div>\n  );\n};\n\nexport default ConsoleRenderStrategy;\n","import DivRenderStrategy from \"./render-strategies/DivRenderStrategy\";\nimport DivRenderStrategyTextured from \"./render-strategies/DivRenderStrategyTextured\";\nimport TextRenderStrategy from \"./render-strategies/TextRenderStrategy\";\nimport ConsoleRenderStrategy from \"./render-strategies/ConsoleRenderStrategy\";\n\nclass Settings {\n  public static readonly viewPortSizeMultiplier: number = 0.9;\n  public static readonly uiMapSizeMultiplier: number = 0.5;\n\n  public static readonly textRenderCharSpectre: string = \",,:;I&&00%$@@#\";\n  public static readonly viewportWidthToCharsScaleCoefficient = 0.33;\n  public static readonly viewportHeightToCharsScaleCoefficient = 0.166;\n\n  public static readonly consoleRaysCount: number = 100;\n  public static readonly consoleHeight: number = 40;\n\n  public static readonly renderingStrategies: RenderStrategy[] = [\n    {\n      name: \"HTML <div> Textured\",\n      component: DivRenderStrategyTextured,\n      raysCountChangeAvailable: true,\n    },\n    {\n      name: \"HTML <div> Shaded\",\n      component: DivRenderStrategy,\n      raysCountChangeAvailable: true,\n    },\n    { name: \"HTML <textarea> (Only chrome)\", component: TextRenderStrategy },\n    {\n      name: \"Console in your Chrome (only) browser :D\",\n      component: ConsoleRenderStrategy,\n    },\n  ];\n\n  private constructor() {}\n}\n\nexport default Settings;\n","class Angle {\n  public static toRad = (degrees: number) => (degrees * Math.PI) / 180;\n\n  public static toDeg = (radians: number) => (radians * 180) / Math.PI;\n\n  public static normalize(angle: number): number {\n    angle = angle % (2 * Math.PI);\n    if (angle < 0) {\n      angle = 2 * Math.PI + angle;\n    }\n    return angle;\n  }\n}\n\nexport default Angle;\n","import { useViewport as useViewportCore } from \"@toolz/use-viewport\";\n\nimport Settings from \"../Settings\";\n\nexport { default as Angle } from \"./angle\";\n\nexport const calculateDistance = (p1: Position, p2: Position): number => {\n  return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);\n};\n\nexport const getCharByStripHeight = (\n  height: number,\n  maxHeight: number\n): string => {\n  const charsSpectre = \",,:;I&&00%$@@#\";\n\n  let key = Math.round((height / maxHeight) * charsSpectre.length);\n  if (key < 0) key = 0;\n  if (key >= charsSpectre.length) key = charsSpectre.length - 1;\n\n  const char = charsSpectre[key];\n\n  return charsSpectre[key];\n};\n\nexport const useViewport = (): { width: number; height: number } => {\n  const viewPort = useViewportCore();\n\n  return {\n    width: Math.round(viewPort.width * Settings.viewPortSizeMultiplier),\n    height: Math.round(viewPort.height * Settings.viewPortSizeMultiplier),\n  };\n};\n\nexport const limit = (value: number, limit: number): number => {\n  if (value > limit) return limit;\n\n  return value;\n};\n","import Raycaster, { usePlayerPosition } from \"../../Raycaster\";\n\nconst PlayerMarker = () => {\n  const position = usePlayerPosition();\n  if (!position) return null;\n\n  const raycaster = Raycaster.getInstance();\n  const size = raycaster.player.radius * 2;\n\n  return (\n    <div\n      className=\"player-marker\"\n      style={{\n        top: position.y / 2,\n        left: position.x / 2,\n      }}\n    >\n      <div\n        className=\"marker-body\"\n        style={{\n          height: size,\n          width: size,\n          top: -raycaster.player.radius,\n          left: -raycaster.player.radius,\n          transform: `rotate(${position.rotation}rad)`,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PlayerMarker;\n","import { FC } from \"react\";\n\nconst Line: FC<{ from: Position; to: Position }> = (props) => {\n  let from = props.from;\n  let to = props.to;\n  if (to.x < from.x) {\n    from = props.to;\n    to = props.from;\n  }\n\n  const len = Math.sqrt(\n    Math.pow(from.x - to.x, 2) + Math.pow(from.y - to.y, 2)\n  );\n  const angle = Math.atan((to.y - from.y) / (to.x - from.x));\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        transform: `translate(${\n          from.x - 0.5 * len * (1 - Math.cos(angle))\n        }px, ${from.y + 0.5 * len * Math.sin(angle)}px) rotate(${angle}rad)`,\n        width: `${len}px`,\n        height: `${0}px`,\n        borderBottom: \"2px solid yellow\",\n      }}\n    />\n  );\n};\n\nexport default Line;\n","import { Fragment } from \"react\";\nimport { useRays, usePlayerPosition } from \"../../Raycaster\";\n\nimport Line from \"./Line\";\n\nconst RayHits = () => {\n  const rays = useRays();\n  const position = usePlayerPosition();\n\n  if (!position) return null;\n\n  return (\n    <Fragment>\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        if (index % 20 !== 0) return null;\n\n        return (\n          <Line\n            key={index}\n            from={{ x: position.x / 2, y: position.y / 2 }}\n            to={{ x: ray.collision.point.x / 2, y: ray.collision.point.y / 2 }}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default RayHits;\n","import { Fragment } from \"react\";\n\nimport { useGrid } from \"../../Raycaster\";\n\nimport PlayerMarker from \"./PlayerMarker\";\nimport RayHits from \"./RayHits\";\n\nimport \"./style.scss\";\n\nconst UiMap = () => {\n  const grid = useGrid();\n  if (!grid) return null;\n\n  const tilesSize = grid.tileSize / 2;\n  const rows = grid.data.length;\n  const cols = grid.data[0].length;\n\n  const width = cols * tilesSize;\n  const height = rows * tilesSize;\n\n  return (\n    <div className=\"ui-map\">\n      <div className=\"cell-wrapper\" style={{ width, height }}>\n        <RayHits />\n\n        {grid.data.map((row, i) => (\n          <Fragment key={i}>\n            {row.map((cellType: Cell, j) => {\n              if (cellType === 0) return null;\n\n              return (\n                <div\n                  className=\"cell\"\n                  style={{\n                    top: i * tilesSize,\n                    left: j * tilesSize,\n                    width: tilesSize,\n                    height: tilesSize,\n                  }}\n                  key={j}\n                />\n              );\n            })}\n\n            <PlayerMarker />\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UiMap;\n","import { useEffect, useState } from \"react\";\n\nimport { useViewport, Angle } from \"./utils\";\n\nimport Settings from \"./Settings\";\n\nimport Scene from \"./Scene\";\nimport Raycaster from \"./Raycaster\";\n\nimport UiMap from \"./components/UiMap\";\n\nconst App = () => {\n  const raycaster = Raycaster.getInstance();\n\n  const [fov, setFov] = useState<number>(raycaster.FOV);\n  const [rays, setRays] = useState<number>(raycaster.raysCount);\n\n  const [renderStrategy, setRenderStrategy] = useState<RenderStrategy>(\n    Settings.renderingStrategies[0]\n  );\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    scene.init();\n  }, []);\n  useEffect(() => {\n    raycaster.FOV = fov;\n  }, [fov]);\n  useEffect(() => {\n    raycaster.raysCount = rays;\n  }, [rays]);\n  useEffect(() => {\n    setRays(raycaster.raysCount);\n  }, [renderStrategy, raycaster]);\n\n  const { height, width } = useViewport();\n\n  return (\n    <div className=\"App\">\n      <div className=\"game-view-port\" style={{ width, height }}>\n        {<renderStrategy.component />}\n\n        <UiMap />\n      </div>\n\n      <div>\n        <div>\n          Rendering strategy:{\" \"}\n          <select\n            onChange={(event) => {\n              const strategy = Settings.renderingStrategies.find(\n                (strategy) => strategy.name === event.target.value\n              );\n              setRenderStrategy(strategy);\n            }}\n            value={renderStrategy.name}\n            autoFocus={false}\n          >\n            {Settings.renderingStrategies.map((strategy) => (\n              <option value={strategy.name} key={strategy.name}>\n                {strategy.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          FOV:{\"  \"}\n          <input\n            type=\"range\"\n            min=\"20\"\n            max=\"360\"\n            value={Angle.toDeg(fov)}\n            step=\"10\"\n            onChange={(e) => setFov(Angle.toRad(Number(e.target.value)))}\n          />\n          Value: {Math.round(Angle.toDeg(fov))}° (default: 60°)\n        </div>\n        {renderStrategy.raysCountChangeAvailable && (\n          <div>\n            RAYS:\n            <input\n              type=\"range\"\n              min=\"10\"\n              max=\"500\"\n              value={rays}\n              step=\"10\"\n              onChange={(e) => setRays(Number(e.target.value))}\n            />\n            Value: {rays} (default: 160)\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"../App\";\n\nimport \"../style/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}