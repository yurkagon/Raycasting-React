{"version":3,"sources":["bootstrap/serviceWorkerRegistration.ts","bootstrap/reportWebVitals.ts","Scene/GameObject.ts","Scene/Scene.ts","Raycaster/Grid.ts","Raycaster/Player/Control.ts","Raycaster/Player/Player.ts","Raycaster/Ray.ts","levels/level1.ts","Raycaster/Raycaster.ts","Raycaster/utils.ts","render-strategies/DivRenderStrategy/DivRenderStrategy.tsx","render-strategies/DivRenderStrategyTextured/wall.jpg","render-strategies/DivRenderStrategyTextured/DivRenderStrategyTextured.tsx","render-strategies/TextRenderStrategy/TextRenderStrategy.tsx","render-strategies/ConsoleRenderStrategy/ConsoleRenderStrategy.tsx","Settings.ts","utils/angle.ts","utils/index.ts","components/UiMap/PlayerMarker.tsx","components/UiMap/Line.tsx","components/UiMap/RayHits.tsx","components/UiMap/UiMap.tsx","App.tsx","bootstrap/index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameObject","started","Scene","getInstance","subscribe","this","subscribers","setInterval","update","forEach","subscriber","isStarted","start","push","index","findIndex","el","splice","instance","Grid","data","tileSize","grid","position","gridPosition","convertPositionToGridPosition","Math","floor","y","x","Control","MOUSE_SENSITIVITY","ROTATION_SPEED","moveState","toForward","toBack","rotateLeft","rotateRight","attachKeyDown","attachKeyUp","document","body","addEventListener","event","code","Player","rotation","walkSpeed","rotationSpeed","Angle","toRad","radius","control","multiplier","vector","cos","sin","moveBy","newPosition","isCollision","Ray","point","angle","hit","hitDistance","hitPercent","stripHeight","checkingDistance","maxDistance","cast","distance","rayPoint","collision","calculateDistance","level","Raycaster","FOV","raysCount","player","rays","setData","level1","anglePerRay","startAngle","columnId","count","usePlayerPosition","useState","playerPosition","setPlayerPosition","useEffect","scene","raycaster","unsubscribe","useRays","setRays","DivRenderStrategy","viewport","useViewport","stripWidth","width","className","map","ray","style","height","left","top","backgroundColor","DivRenderStrategyTextured","src","wallTexture","TextRenderStrategy","setRaysCount","Settings","viewportWidthToCharsScaleCoefficient","length","viewportHeightToCharsScaleCoefficient","charArray","charHeight","round","normalizedCharHeight","Array","from","fill","getCharByStripHeight","emptyCellsCount","topEmptyCellsCount","ceil","bottomEmptyCellsCount","i","unshift","str","rotate","join","value","rows","readOnly","previousRaysCount","setPreviousRaysCount","renderedString","setRenderedString","consoleRaysCount","consoleHeight","console","log","viewPortSizeMultiplier","uiMapSizeMultiplier","textRenderCharSpectre","renderingStrategies","name","component","ConsoleRenderStrategy","degrees","PI","toDeg","radians","p1","p2","sqrt","maxHeight","charsSpectre","key","viewPort","useViewportCore","PlayerMarker","size","transform","Line","props","to","len","pow","atan","borderBottom","RayHits","UiMap","setDataData","setTileSize","useGrid","tilesSize","row","cellType","j","App","renderStrategy","setRenderStrategy","init","onChange","strategy","find","target","autoFocus","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qSAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,0DCaCQ,E,WAjBb,aAAe,yBAFPC,SAAmB,EAGXC,EAAMC,cAEdC,UAAUC,M,yCAGlB,WACEA,KAAKJ,SAAU,I,uBAGjB,WACE,OAAOI,KAAKJ,Y,KCZVC,E,iDACII,YAA4B,G,wCAEpC,WAAe,IAAD,OACZC,aAAY,kBAAM,EAAKC,WAAU,M,oBAGnC,WACEH,KAAKC,YAAYG,SAAQ,SAACC,GACpBA,aAAsBV,GACnBU,EAAWC,aAAaD,EAAWE,QAExCF,EAAWF,UAEXE,S,uBAKN,SAAiBA,GACfL,KAAKC,YAAYO,KAAKH,K,yBAExB,SAAmBA,GACjB,IAAMI,EAAQT,KAAKC,YAAYS,WAAU,SAACC,GAAD,OAAQN,IAAeM,KAEhEX,KAAKC,YAAYW,OAAOH,EAAO,M,0BAKjC,WACE,OAAIT,KAAKa,WAETb,KAAKa,SAAW,IAAIhB,GAFMG,KAAKa,a,KA/B7BhB,EA4BWgB,c,EAWFhB,Q,OC3CTiB,E,WAIJ,aAAuB,yBAHhBC,KAAiB,KAGF,KAFNC,SAAmB,G,2CAInC,SAAeC,GACbjB,KAAKe,KAAOE,I,yBAGd,SAAmBC,GAAsC,IAAD,IAChDC,EAAenB,KAAKoB,8BAA8BF,GAMxD,OADkC,KAHxB,UACRlB,KAAKe,YADG,iBACR,EAAYM,KAAKC,MAAMH,EAAaI,WAD5B,aACR,EAA0CF,KAAKC,MAAMH,EAAaK,KAK7DL,EAFuB,O,2CAKhC,SAAsCD,GACpC,MAAO,CACLM,EAAGN,EAASM,EAAIxB,KAAKgB,SACrBO,EAAGL,EAASK,EAAIvB,KAAKgB,a,0BAKzB,WACE,OAAIhB,KAAKa,WAETb,KAAKa,SAAW,IAAIC,GAFMd,KAAKa,a,KA/B7BC,EA6BWD,c,EAUFC,QCOAW,E,WAnCb,aAAsB,yBAVNC,kBAAoB,IAUf,KATLC,eAAiB,EASZ,KAPdC,UAAY,CACjBC,WAAW,EACXC,QAAQ,EACRC,YAAY,EACZC,aAAa,GAIbhC,KAAKiC,gBACLjC,KAAKkC,c,iDAGP,WAA+B,IAAD,OAC5BC,SAASC,KAAKC,iBAAiB,WAAW,SAACC,GACzC,IAAQC,EAASD,EAATC,KAEK,YAATA,GAA+B,SAATA,IACxB,EAAKX,UAAUC,WAAY,GAChB,cAATU,GAAiC,SAATA,IAAiB,EAAKX,UAAUE,QAAS,GACxD,cAATS,GAAiC,SAATA,IAC1B,EAAKX,UAAUG,YAAa,GACjB,eAATQ,GAAkC,SAATA,IAC3B,EAAKX,UAAUI,aAAc,Q,yBAInC,WAA6B,IAAD,OAC1BG,SAASC,KAAKC,iBAAiB,SAAS,SAACC,GACvC,IAAQC,EAASD,EAATC,KAEK,YAATA,GAA+B,SAATA,IACxB,EAAKX,UAAUC,WAAY,GAChB,cAATU,GAAiC,SAATA,IAC1B,EAAKX,UAAUE,QAAS,GACb,cAATS,GAAiC,SAATA,IAC1B,EAAKX,UAAUG,YAAa,GACjB,eAATQ,GAAkC,SAATA,IAC3B,EAAKX,UAAUI,aAAc,U,KClC/BQ,E,4MAOGtB,SAAqB,CAC1BM,EAAG,mBACHD,EAAG,mBACHkB,UAAW,oB,EAGGC,UAAY,E,EACZC,cAAgBC,EAAMC,MAAM,G,EAE5BC,OAAS,E,EAERC,QAAU,IAAItB,E,4CAE/B,WACE,MACEzB,KAAK+C,QAAQnB,UADPG,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAAaH,EAAjC,EAAiCA,UAAWC,EAA5C,EAA4CA,OAG5C,GAAIC,GAAcC,EAAa,CAC7B,IAAMgB,EAAahB,EAAc,GAAK,EAEtChC,KAAKkB,SAAL,2BACKlB,KAAKkB,UADV,IAEEuB,SAAUzC,KAAKkB,SAASuB,SAAWzC,KAAK2C,cAAgBK,IAI5D,GAAInB,GAAaC,EAAQ,CACvB,IAAMkB,EAAanB,EAAY,GAAK,EAE9BoB,EAAS,CACbzB,EAAGH,KAAK6B,IAAIlD,KAAKkB,SAASuB,UAAYzC,KAAK0C,UAAYM,EACvDzB,EAAGF,KAAK8B,IAAInD,KAAKkB,SAASuB,UAAYzC,KAAK0C,UAAYM,GAGzDhD,KAAKoD,OAAOH,M,oBAIhB,SAAcA,GACZ,IAAMhC,EAAOH,EAAKhB,cAEZuD,EAAW,2BACZrD,KAAKkB,UADO,IAEfM,EAAGxB,KAAKkB,SAASM,EAAIyB,EAAOzB,EAC5BD,EAAGvB,KAAKkB,SAASK,EAAI0B,EAAO1B,IAG1BN,EAAKqC,YAAYD,KAErBrD,KAAKkB,SAAWmC,M,0BAIlB,WACE,OAAIrD,KAAKa,WAETb,KAAKa,SAAW,IAAI2B,GAFMxC,KAAKa,a,GA7DdlB,GAAf6C,EA2DW3B,c,EAUF2B,QChBAe,E,WAzCb,WAAYC,EAAiBC,GAAgB,yBAb5BD,WAa2B,OAZ5BC,WAY4B,OAVrCC,SAUqC,OATrCC,iBASqC,OARrCC,gBAQqC,OAPrCC,YAAsB,EAOe,KAL3BC,iBAA2B,GAKA,KAJ5BC,YAAsB,IAIM,KAF3B9C,KAAaH,EAAKhB,cAGjCE,KAAKyD,MAAQA,EACbzD,KAAKwD,MAAQA,EAEbxD,KAAKgE,O,wCAGP,WAGE,IAFA,IAAIC,EAAW,EAERA,EAAWjE,KAAK+D,aAAa,CAClC,IAAMd,EAAmB,CACvBzB,EAAGH,KAAK6B,IAAIlD,KAAKyD,OAASQ,EAC1B1C,EAAGF,KAAK8B,IAAInD,KAAKyD,OAASQ,GAGtBC,EAAqB,CACzB1C,EAAGxB,KAAKwD,MAAMhC,EAAIyB,EAAOzB,EACzBD,EAAGvB,KAAKwD,MAAMjC,EAAI0B,EAAO1B,GAGrB4C,EAAYnE,KAAKiB,KAAKqC,YAAYY,GAExC,GAAIC,EAAW,CACbnE,KAAK0D,IAAMQ,EACXlE,KAAK4D,WAAa,CAAEpC,EAAG2C,EAAU3C,EAAI,EAAGD,EAAG4C,EAAU5C,EAAI,GACzDvB,KAAK2D,YAAcS,EAAkBpE,KAAKwD,MAAOU,GAEjDlE,KAAK6D,YACH,KACCxC,KAAK6B,IAAIV,EAAO1C,cAAcoB,SAASuB,SAAWzC,KAAKyD,OACtDzD,KAAK2D,aAET,MAGFM,GAAYjE,KAAK8D,sB,KCzCRO,EAdS,CACtvCC,E,4MACIC,IAAc3B,EAAMC,MAAM,I,EAC3B2B,UAAoB,I,EAEpBC,OAAiBjC,EAAO1C,c,EACxBmB,KAAaH,EAAKhB,c,EAElB4E,KAAc,G,2CAErB,WACE,8DAEA1E,KAAKiB,KAAK0D,QAAQC,K,oBAGpB,WACE5E,KAAK0E,KAAO,GAMZ,IAJA,IAAMG,EAAc7E,KAAKuE,IAAMvE,KAAKwE,UAE9BM,EAAa9E,KAAKyE,OAAOvD,SAASuB,SAAWzC,KAAKuE,IAAM,EAErDQ,EAAW,EAAGA,EAAW/E,KAAKwE,UAAWO,IAAY,CAC5D,IAAMtB,EAAQqB,EAAaD,EAAcE,EAEzC/E,KAAK0E,KAAKlE,KAAK,IAAI+C,EAAIvD,KAAKyE,OAAOvD,SAAUuC,O,0BAIjD,SAAoBuB,GAClBhF,KAAKwE,UAAYQ,K,0BAInB,WACE,OAAIhF,KAAKa,WAETb,KAAKa,SAAW,IAAIyD,GAFMtE,KAAKa,a,GAnCXlB,GAAlB2E,EAiCWzD,c,EAUFyD,QCvBFW,EAAoB,WAC/B,MAA4CC,mBAAmB,MAA/D,mBAAOC,EAAP,KAAuBC,EAAvB,KAgBA,OAdAC,qBAAU,WACR,IAAMC,EAAQzF,EAAMC,cAEdyF,EAAYjB,EAAUxE,cAEtBO,EAAa,WACjB+E,EAAkBG,EAAUd,OAAOvD,WAKrC,OAFAoE,EAAMvF,UAAUM,GAET,kBAAMiF,EAAME,YAAYnF,MAC9B,IAEI8E,GAGIM,EAAU,WACrB,MAAwBP,mBAAgB,IAAxC,mBAAOR,EAAP,KAAagB,EAAb,KAgBA,OAdAL,qBAAU,WACR,IAAMC,EAAQzF,EAAMC,cAEdyF,EAAYjB,EAAUxE,cAEtBO,EAAa,WACjBqF,EAAQH,EAAUb,OAKpB,OAFAY,EAAMvF,UAAUM,GAET,kBAAMiF,EAAME,YAAYnF,MAC9B,IAEIqE,G,eC5BMiB,EAjCW,WACxB,IAAMjB,EAAOe,IACPF,EAAYjB,EAAUxE,cAEtB8F,EAAWC,IAEXC,EAAaF,EAASG,MAAQR,EAAUf,UAE9C,OACE,qBAAKwB,UAAU,sBAAf,SACGtB,EAAKuB,KAAI,SAACC,EAAKzF,GACd,OAAKyF,EAAIxC,IAGP,qBACEsC,UAAU,QACVG,MAAO,CACLJ,MAAOD,EACPM,OAAQF,EAAIrC,YACZwC,KAAMP,EAAarF,EACnB6F,KAAMV,EAASQ,OAASF,EAAIrC,aAAe,EAC3C0C,gBAAgB,WAAD,OACZ,IAAML,EAAIrC,YAAe+B,EAASQ,OADtB,aAEHF,EAAIrC,YAAc+B,EAASQ,OAAlC,IAFU,OAIZ3F,GAdY,WCjBd,MAA0B,iCC8C1B+F,G,MAvCmB,WAChC,IAAM9B,EAAOe,IACPF,EAAYjB,EAAUxE,cAEtB8F,EAAWC,IAEXC,EAAaF,EAASG,MAAQR,EAAUf,UAE9C,OACE,qBAAKwB,UAAU,+BAAf,SACGtB,EAAKuB,KAAI,SAACC,EAAKzF,GACd,OAAKyF,EAAIxC,IAGP,qBACEsC,UAAU,QACVG,MAAO,CACLJ,MAAOD,EACPM,OAAQF,EAAIrC,YACZwC,KAAMP,EAAarF,EACnB6F,KAAMV,EAASQ,OAASF,EAAIrC,aAAe,GAN/C,SAUE,qBACE4C,IAAKC,EACLP,MAAO,CACLC,OAAQF,EAAIrC,YACZkC,MAAOG,EAAIrC,YACXwC,MAAQH,EAAItC,WAAWpC,EAAI0E,EAAIrC,gBAP9BpD,GAXY,Y,OCiDdkG,G,MAxDY,WACzB,IAAMjC,EAAOe,IACPF,EAAYjB,EAAUxE,cAEtB8F,EAAWC,IAQjB,GANAR,qBAAU,WACRE,EAAUqB,aACRvF,KAAKC,MAAMsE,EAASG,MAAQc,EAASC,yCAEtC,CAAClB,EAASG,SAERrB,EAAKqC,OAAQ,OAAO,KAEzB,IAAMX,EAAS/E,KAAKC,MAClBsE,EAASQ,OAASS,EAASG,uCAGvBC,EAAYvC,EAAKuB,KAAI,SAACC,GAiB1B,IAhBA,IAEMgB,EAAa7F,KAAK8F,MACrBjB,EAAIrC,YAHwB,IAGgBuC,GAEzCgB,EAAuBF,EAAad,EAASA,EAASc,EAEtDD,EAAYI,MAAMC,KAAK,CAAEP,OAAQK,IAAwBG,KAC7DC,EAAqBJ,EAAsBhB,IAGvCqB,EAAkBrB,EAASgB,EAE3BM,EAAqBrG,KAAKsG,KAAKF,EAAkB,GACjDG,EAAwBH,EAAkBC,EAEvCG,EAAI,EAAGA,EAAIH,EAAoBG,IACtCZ,EAAUzG,KAAK,KAEjB,IAAK,IAAIqH,EAAI,EAAGA,EAAID,EAAuBC,IACzCZ,EAAUa,QAAQ,KAGpB,OAAOb,KAKHc,EAFmBC,iBAAOf,EAAW,KAEdhB,KAAI,SAACtF,GAAD,OAAQA,EAAGsH,KAAK,OAAKA,KAAK,MAE3D,OACE,qBAAKjC,UAAU,uBAAf,SACE,0BAAUkC,MAAOH,EAAKI,KAAM/B,EAAQgC,UAAQ,QCWnCzB,G,MA9DY,WACzB,MAAkDzB,mBAAiB,MAAnE,mBAAOmD,EAAP,KAA0BC,EAA1B,KACA,EAA4CpD,mBAAiB,MAA7D,mBAAOqD,EAAP,KAAuBC,EAAvB,KAEM9D,EAAOe,IACPF,EAAYjB,EAAUxE,cAE5BuF,qBAAU,WAKR,OAJAiD,EAAqB/C,EAAUf,WAE/Be,EAAUqB,aAAaC,EAAS4B,kBAEzB,kBAAMlD,EAAUqB,aAAayB,MACnC,IAEH,IAAMjC,EAAS/E,KAAKC,MAAMuF,EAAS6B,eA4CnC,OA1CArD,qBAAU,WACR,IAAKX,EAAKqC,OAAQ,OAAO,KAEzB,IAAME,EAAYvC,EAAKuB,KAAI,SAACC,GAiB1B,IAhBA,IAEMgB,EAAa7F,KAAK8F,MACrBjB,EAAIrC,YAHwB,IAGgBuC,GAEzCgB,EAAuBF,EAAad,EAASA,EAASc,EAEtDD,EAAYI,MAAMC,KAAK,CAAEP,OAAQK,IAAwBG,KAC7DC,EAAqBJ,EAAsBhB,IAGvCqB,EAAkBrB,EAASgB,EAE3BM,EAAqBrG,KAAKsG,KAAKF,EAAkB,GACjDG,EAAwBH,EAAkBC,EAEvCG,EAAI,EAAGA,EAAIH,EAAoBG,IACtCZ,EAAUzG,KAAK,KAEjB,IAAK,IAAIqH,EAAI,EAAGA,EAAID,EAAuBC,IACzCZ,EAAUa,QAAQ,KAGpB,OAAOb,KAKHc,EAFmBC,iBAAOf,EAAW,KAEdhB,KAAI,SAACtF,GAAD,OAAQA,EAAGsH,KAAK,OAAKA,KAAK,MAE3DO,EAAkBT,KACjB,CAACrD,IAEJW,qBAAU,WACRsD,QAAQC,IAAR,wCACAD,QAAQC,IAAIL,KACX,CAACA,IAEG,OCjEH1B,EAwBJ,aAAuB,qBAxBnBA,EACmBgC,uBAAiC,GADpDhC,EAEmBiC,oBAA8B,GAFjDjC,EAImBkC,sBAAgC,iBAJnDlC,EAKmBC,qCAAuC,IAL1DD,EAMmBG,sCAAwC,KAN3DH,EAQmB4B,iBAA2B,IAR9C5B,EASmB6B,cAAwB,GAT3C7B,EAWmBmC,oBAAwC,CAC7D,CAAEC,KAAM,oBAAqBC,UAAWvD,GACxC,CACEsD,KAAM,mCACNC,UAAW1C,GAEb,CAAEyC,KAAM,gCAAiCC,UAAWvC,GACpD,CACEsC,KAAM,2CACNC,UAAWC,IAOFtC,QChCTjE,E,kCAAAA,EACUC,MAAQ,SAACuG,GAAD,OAAsBA,EAAU/H,KAAKgI,GAAM,KAD7DzG,EAGU0G,MAAQ,SAACC,GAAD,OAAgC,IAAVA,EAAiBlI,KAAKgI,IAGrDzG,QCAFwB,EAAoB,SAACoF,EAAcC,GAC9C,OAAOpI,KAAKqI,KAAK,SAACD,EAAGjI,EAAIgI,EAAGhI,EAAM,GAAjB,SAAsBiI,EAAGlI,EAAIiI,EAAGjI,EAAM,KAG5CiG,EAAuB,SAClCpB,EACAuD,GAEA,IAAMC,EAAe,iBAEjBC,EAAMxI,KAAK8F,MAAOf,EAASuD,EAAaC,EAAa7C,QACrD8C,EAAM,IAAGA,EAAM,GACfA,GAAOD,EAAa7C,SAAQ8C,EAAMD,EAAa7C,OAAS,GAI5D,OAAO6C,EAAaC,IAGThE,EAAc,WACzB,IAAMiE,EAAWC,cAEjB,MAAO,CACLhE,MAAO1E,KAAK8F,MAAM2C,EAAS/D,MAAQc,EAASgC,wBAC5CzC,OAAQ/E,KAAK8F,MAAM2C,EAAS1D,OAASS,EAASgC,0BCCnCmB,EA7BM,WACnB,IAAM9I,EAAW+D,IACjB,IAAK/D,EAAU,OAAO,KAEtB,IAAMqE,EAAYjB,EAAUxE,cACtBmK,EAAiC,EAA1B1E,EAAUd,OAAO3B,OAE9B,OACE,qBACEkD,UAAU,gBACVG,MAAO,CACLG,IAAKpF,EAASK,EAAI,EAClB8E,KAAMnF,EAASM,EAAI,GAJvB,SAOE,qBACEwE,UAAU,cACVG,MAAO,CACLC,OAAQ6D,EACRlE,MAAOkE,EACP3D,KAAMf,EAAUd,OAAO3B,OACvBuD,MAAOd,EAAUd,OAAO3B,OACxBoH,UAAU,UAAD,OAAYhJ,EAASuB,SAArB,cCMJ0H,EA5BoC,SAACC,GAClD,IAAI9C,EAAO8C,EAAM9C,KACb+C,EAAKD,EAAMC,GACXA,EAAG7I,EAAI8F,EAAK9F,IACd8F,EAAO8C,EAAMC,GACbA,EAAKD,EAAM9C,MAGb,IAAMgD,EAAMjJ,KAAKqI,KACfrI,KAAKkJ,IAAIjD,EAAK9F,EAAI6I,EAAG7I,EAAG,GAAKH,KAAKkJ,IAAIjD,EAAK/F,EAAI8I,EAAG9I,EAAG,IAEjDkC,EAAQpC,KAAKmJ,MAAMH,EAAG9I,EAAI+F,EAAK/F,IAAM8I,EAAG7I,EAAI8F,EAAK9F,IAEvD,OACE,qBACE2E,MAAO,CACLjF,SAAU,WACVgJ,UAAU,aAAD,OACP5C,EAAK9F,EAAI,GAAM8I,GAAO,EAAIjJ,KAAK6B,IAAIO,IAD5B,eAEF6D,EAAK/F,EAAI,GAAM+I,EAAMjJ,KAAK8B,IAAIM,GAF5B,sBAEgDA,EAFhD,QAGTsC,MAAM,GAAD,OAAKuE,EAAL,MACLlE,OAAO,GAAD,OAAK,EAAL,MACNqE,aAAc,uBCMPC,EAzBC,WACd,IAAMhG,EAAOe,IACPvE,EAAW+D,IAEjB,OAAK/D,EAGH,cAAC,WAAD,UACGwD,EAAKuB,KAAI,SAACC,EAAKzF,GACd,OAAKyF,EAAIxC,IAELjD,EAAQ,KAAO,EAAU,KAG3B,cAAC,EAAD,CAEE6G,KAAM,CAAE9F,EAAGN,EAASM,EAAI,EAAGD,EAAGL,EAASK,EAAI,GAC3C8I,GAAI,CAAE7I,EAAG0E,EAAIxC,IAAIlC,EAAI,EAAGD,EAAG2E,EAAIxC,IAAInC,EAAI,IAFlCd,GANY,UALL,MC2CTkK,G,MA3CD,WACZ,IAAM1J,EZJe,WACrB,MAA4BiE,mBAAmB,MAA/C,mBAAOjE,EAAP,KAAa2J,EAAb,KACA,EAAgC1F,mBAAiB,MAAjD,mBAAOlE,EAAP,KAAiB6J,EAAjB,KAiBA,OAfAxF,qBAAU,WACR,IAAMC,EAAQzF,EAAMC,cAEdyF,EAAYjB,EAAUxE,cAEtBO,EAAa,WACjBuK,EAAYrF,EAAUtE,KAAKF,MAC3B8J,EAAYtF,EAAUtE,KAAKD,WAK7B,OAFAsE,EAAMvF,UAAUM,GAET,kBAAMiF,EAAME,YAAYnF,MAC9B,IAEEY,EAEE,CAAEF,KAAME,EAAMD,YAFH,KYfL8J,GACb,IAAK7J,EAAM,OAAO,KAElB,IAAM8J,EAAY9J,EAAKD,SAAW,EAC5BmH,EAAOlH,EAAKF,KAAKgG,OAGjBhB,EAFO9E,EAAKF,KAAK,GAAGgG,OAELgE,EACf3E,EAAS+B,EAAO4C,EAEtB,OACE,qBAAK/E,UAAU,SAAf,SACE,sBAAKA,UAAU,eAAeG,MAAO,CAAEJ,QAAOK,UAA9C,UACE,cAAC,EAAD,IAECnF,EAAKF,KAAKkF,KAAI,SAAC+E,EAAKnD,GAAN,OACb,eAAC,WAAD,WACGmD,EAAI/E,KAAI,SAACgF,EAAgBC,GACxB,OAAiB,IAAbD,EAAuB,KAGzB,qBACEjF,UAAU,OACVG,MAAO,CACLG,IAAKuB,EAAIkD,EACT1E,KAAM6E,EAAIH,EACVhF,MAAOgF,EACP3E,OAAQ2E,IAELG,MAKX,cAAC,EAAD,MAlBarD,aC8BVsD,EA9CH,WACV,MAA4CjG,mBAC1C2B,EAASmC,oBAAoB,IAD/B,mBAAOoC,EAAP,KAAuBC,EAAvB,KAIAhG,qBAAU,WACMxF,EAAMC,cAEdwL,SACL,IAEH,MAA0BzF,IAAlBO,EAAR,EAAQA,OAAQL,EAAhB,EAAgBA,MAEhB,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,iBAAiBG,MAAO,CAAEJ,QAAOK,UAAhD,UACG,cAACgF,EAAelC,UAAhB,IAED,cAAC,EAAD,OAGF,8BACE,sDACsB,IACpB,wBACEqC,SAAU,SAACjJ,GACT,IAAMkJ,EAAW3E,EAASmC,oBAAoByC,MAC5C,SAACD,GAAD,OAAcA,EAASvC,OAAS3G,EAAMoJ,OAAOxD,SAE/CmD,EAAkBG,IAEpBtD,MAAOkD,EAAenC,KACtB0C,WAAW,EARb,SAUG9E,EAASmC,oBAAoB/C,KAAI,SAACuF,GAAD,OAChC,wBAAQtD,MAAOsD,EAASvC,KAAxB,SACGuC,EAASvC,MADuBuC,EAASvC,oB,MCnC1D2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3J,SAAS4J,eAAe,SxBsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7M,MAAK,SAAC8M,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN3D,QAAQ2D,MAAMA,EAAMC,YwBpH5BrN,M","file":"static/js/main.41e9d3e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Scene from \"./Scene\";\n\nabstract class GameObject {\n  private started: boolean = false;\n\n  constructor() {\n    const scene = Scene.getInstance();\n\n    scene.subscribe(this);\n  }\n\n  public start(): void {\n    this.started = true;\n  }\n\n  public isStarted() {\n    return this.started;\n  }\n\n  public abstract update(): void;\n}\n\nexport default GameObject;\n","import GameObject from \"./GameObject\";\n\nimport { Subscriber } from \"./types\";\n\nclass Scene {\n  private subscribers: Subscriber[] = [];\n\n  public init() {\n    setInterval(() => this.update(), 10);\n  }\n\n  public update() {\n    this.subscribers.forEach((subscriber) => {\n      if (subscriber instanceof GameObject) {\n        if (!subscriber.isStarted()) subscriber.start();\n\n        subscriber.update();\n      } else {\n        subscriber();\n      }\n    });\n  }\n\n  public subscribe(subscriber: Subscriber): void {\n    this.subscribers.push(subscriber);\n  }\n  public unsubscribe(subscriber: Subscriber) {\n    const index = this.subscribers.findIndex((el) => subscriber === el);\n\n    this.subscribers.splice(index, 1);\n  }\n\n  private static instance: Scene;\n\n  public static getInstance(): Scene {\n    if (this.instance) return this.instance;\n\n    this.instance = new Scene();\n\n    return this.instance;\n  }\n}\n\nexport default Scene;\n","class Grid {\n  public data: CellGrid = null;\n  public readonly tileSize: number = 32;\n\n  private constructor() {}\n\n  public setData(grid: CellGrid): void {\n    this.data = grid;\n  }\n\n  public isCollision(position: Position): null | Position {\n    const gridPosition = this.convertPositionToGridPosition(position);\n\n    const cell =\n      this.data?.[Math.floor(gridPosition.y)]?.[Math.floor(gridPosition.x)];\n\n    const isCollisionExist = cell !== 0;\n    if (!isCollisionExist) return null;\n\n    return gridPosition;\n  }\n\n  private convertPositionToGridPosition(position: Position): Position {\n    return {\n      x: position.x / this.tileSize,\n      y: position.y / this.tileSize,\n    };\n  }\n\n  private static instance: Grid;\n  public static getInstance(): Grid {\n    if (this.instance) return this.instance;\n\n    this.instance = new Grid();\n\n    return this.instance;\n  }\n}\n\nexport default Grid;\n","class Control {\n  public readonly MOUSE_SENSITIVITY = 1.5;\n  public readonly ROTATION_SPEED = 2;\n\n  public moveState = {\n    toForward: false,\n    toBack: false,\n    rotateLeft: false,\n    rotateRight: false,\n  };\n\n  public constructor() {\n    this.attachKeyDown();\n    this.attachKeyUp();\n  }\n\n  private attachKeyDown(): void {\n    document.body.addEventListener(\"keydown\", (event) => {\n      const { code } = event;\n\n      if (code === \"ArrowUp\" || code === \"KeyW\")\n        this.moveState.toForward = true;\n      if (code === \"ArrowDown\" || code === \"KeyS\") this.moveState.toBack = true;\n      if (code === \"ArrowLeft\" || code === \"KeyA\")\n        this.moveState.rotateLeft = true;\n      if (code === \"ArrowRight\" || code === \"KeyD\")\n        this.moveState.rotateRight = true;\n    });\n  }\n\n  private attachKeyUp(): void {\n    document.body.addEventListener(\"keyup\", (event) => {\n      const { code } = event;\n\n      if (code === \"ArrowUp\" || code === \"KeyW\")\n        this.moveState.toForward = false;\n      if (code === \"ArrowDown\" || code === \"KeyS\")\n        this.moveState.toBack = false;\n      if (code === \"ArrowLeft\" || code === \"KeyA\")\n        this.moveState.rotateLeft = false;\n      if (code === \"ArrowRight\" || code === \"KeyD\")\n        this.moveState.rotateRight = false;\n    });\n  }\n}\n\nexport default Control;\n","import { Angle } from \"../../utils\";\n\nimport { GameObject } from \"../../Scene\";\nimport Grid from \"../Grid\";\n\nimport Control from \"./Control\";\n\nclass Player extends GameObject {\n  // public position: Position = {\n  //   x: 150,\n  //   y: 150,\n  //   rotation: Math.PI / 2,\n  // };\n\n  public position: Position = {\n    x: 155.15374267341303,\n    y: 141.63397544881818,\n    rotation: -1.8500490071139923,\n  };\n\n  public readonly walkSpeed = 1;\n  public readonly rotationSpeed = Angle.toRad(2);\n\n  public readonly radius = 8;\n\n  private readonly control = new Control();\n\n  public update() {\n    const { rotateLeft, rotateRight, toForward, toBack } =\n      this.control.moveState;\n\n    if (rotateLeft || rotateRight) {\n      const multiplier = rotateRight ? 1 : -1;\n\n      this.position = {\n        ...this.position,\n        rotation: this.position.rotation + this.rotationSpeed * multiplier,\n      };\n    }\n\n    if (toForward || toBack) {\n      const multiplier = toForward ? 1 : -1;\n\n      const vector = {\n        x: Math.cos(this.position.rotation) * this.walkSpeed * multiplier,\n        y: Math.sin(this.position.rotation) * this.walkSpeed * multiplier,\n      };\n\n      this.moveBy(vector);\n    }\n  }\n\n  public moveBy(vector: Position): void {\n    const grid = Grid.getInstance();\n\n    const newPosition = {\n      ...this.position,\n      x: this.position.x + vector.x,\n      y: this.position.y + vector.y,\n    };\n\n    if (grid.isCollision(newPosition)) return;\n\n    this.position = newPosition;\n  }\n\n  private static instance: Player;\n  public static getInstance(): Player {\n    if (this.instance) return this.instance;\n\n    this.instance = new Player();\n\n    return this.instance;\n  }\n}\n\nexport default Player;\n","import { calculateDistance } from \"../utils\";\n\nimport Grid from \"./Grid\";\nimport Player from \"./Player\";\n\nclass Ray {\n  private readonly point: Position;\n  public readonly angle: number;\n\n  public hit?: Position;\n  public hitDistance?: number;\n  public hitPercent?: Position;\n  public stripHeight: number = 0;\n\n  private readonly checkingDistance: number = 1 / 2;\n  public readonly maxDistance: number = 300;\n\n  private readonly grid: Grid = Grid.getInstance();\n\n  constructor(point: Position, angle: number) {\n    this.angle = angle;\n    this.point = point;\n\n    this.cast();\n  }\n\n  private cast() {\n    let distance = 0;\n\n    while (distance < this.maxDistance) {\n      const vector: Position = {\n        x: Math.cos(this.angle) * distance,\n        y: Math.sin(this.angle) * distance,\n      };\n\n      const rayPoint: Position = {\n        x: this.point.x + vector.x,\n        y: this.point.y + vector.y,\n      };\n\n      const collision = this.grid.isCollision(rayPoint);\n\n      if (collision) {\n        this.hit = rayPoint;\n        this.hitPercent = { x: collision.x % 1, y: collision.y % 1 };\n        this.hitDistance = calculateDistance(this.point, rayPoint);\n\n        this.stripHeight =\n          10000 /\n          (Math.cos(Player.getInstance().position.rotation - this.angle) *\n            this.hitDistance);\n\n        break;\n      }\n\n      distance += this.checkingDistance;\n    }\n  }\n}\n\nexport default Ray;\n","const level: CellGrid = [\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\nexport default level;\n","import { Angle } from \"../utils\";\n\nimport { GameObject } from \"../Scene\";\n\nimport Player from \"./Player\";\nimport Grid from \"./Grid\";\nimport Ray from \"./Ray\";\n\nimport { level1 } from \"../levels\";\n\nclass Raycaster extends GameObject {\n  private FOV: number = Angle.toRad(60);\n  public raysCount: number = 160;\n\n  public player: Player = Player.getInstance();\n  public grid: Grid = Grid.getInstance();\n\n  public rays: Ray[] = [];\n\n  public start() {\n    super.start();\n\n    this.grid.setData(level1);\n  }\n\n  public update() {\n    this.rays = [];\n\n    const anglePerRay = this.FOV / this.raysCount;\n\n    const startAngle = this.player.position.rotation - this.FOV / 2;\n\n    for (let columnId = 0; columnId < this.raysCount; columnId++) {\n      const angle = startAngle + anglePerRay * columnId;\n\n      this.rays.push(new Ray(this.player.position, angle));\n    }\n  }\n\n  public setRaysCount(count: number) {\n    this.raysCount = count;\n  }\n\n  private static instance: Raycaster;\n  public static getInstance(): Raycaster {\n    if (this.instance) return this.instance;\n\n    this.instance = new Raycaster();\n\n    return this.instance;\n  }\n}\n\nexport default Raycaster;\n","import { useState, useEffect } from \"react\";\n\nimport Scene from \"../Scene\";\nimport Raycaster from \"./Raycaster\";\nimport Ray from \"./Ray\";\n\nexport const useGrid = () => {\n  const [grid, setDataData] = useState<CellGrid>(null);\n  const [tileSize, setTileSize] = useState<number>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setDataData(raycaster.grid.data);\n      setTileSize(raycaster.grid.tileSize);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  if (!grid) return null;\n\n  return { data: grid, tileSize };\n};\n\nexport const usePlayerPosition = () => {\n  const [playerPosition, setPlayerPosition] = useState<Position>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setPlayerPosition(raycaster.player.position);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return playerPosition;\n};\n\nexport const useRays = () => {\n  const [rays, setRays] = useState<Ray[]>([]);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setRays(raycaster.rays);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return rays;\n};\n","import { useViewport } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div className=\"div-render-strategy\">\n      {rays.map((ray, index) => {\n        if (!ray.hit) return null;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n              backgroundColor: `rgba(0, ${\n                (300 * ray.stripHeight) / viewport.height\n              }, ${500 * (ray.stripHeight / viewport.height)})`,\n            }}\n            key={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategy;\n","export default __webpack_public_path__ + \"static/media/wall.2598404c.jpg\";","import { useViewport } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\nimport wallTexture from \"./wall.jpg\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategyTextured = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div className=\"div-render-strategy-textured\">\n      {rays.map((ray, index) => {\n        if (!ray.hit) return null;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n            }}\n            key={index}\n          >\n            <img\n              src={wallTexture}\n              style={{\n                height: ray.stripHeight,\n                width: ray.stripHeight,\n                left: -(ray.hitPercent.x * ray.stripHeight),\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategyTextured;\n","import { useEffect } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { useViewport, getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst TextRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  useEffect(() => {\n    raycaster.setRaysCount(\n      Math.floor(viewport.width * Settings.viewportWidthToCharsScaleCoefficient)\n    );\n  }, [viewport.width]);\n\n  if (!rays.length) return null;\n\n  const height = Math.floor(\n    viewport.height * Settings.viewportHeightToCharsScaleCoefficient\n  );\n\n  const charArray = rays.map((ray) => {\n    const stripHeightCoefficient = 480;\n\n    const charHeight = Math.round(\n      (ray.stripHeight / stripHeightCoefficient) * height\n    );\n    const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n    const charArray = Array.from({ length: normalizedCharHeight }).fill(\n      getCharByStripHeight(normalizedCharHeight, height)\n    );\n\n    const emptyCellsCount = height - normalizedCharHeight;\n\n    const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n    const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n    for (let i = 0; i < topEmptyCellsCount; i++) {\n      charArray.push(\" \");\n    }\n    for (let i = 0; i < bottomEmptyCellsCount; i++) {\n      charArray.unshift(\"_\");\n    }\n\n    return charArray;\n  });\n\n  const rotatedCharArray = rotate(charArray, 270);\n\n  const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n  return (\n    <div className=\"text-render-strategy\">\n      <textarea value={str} rows={height} readOnly />\n    </div>\n  );\n};\n\nexport default TextRenderStrategy;\n","import { useEffect, useState } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst TextRenderStrategy = () => {\n  const [previousRaysCount, setPreviousRaysCount] = useState<number>(null);\n  const [renderedString, setRenderedString] = useState<string>(null);\n\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  useEffect(() => {\n    setPreviousRaysCount(raycaster.raysCount);\n\n    raycaster.setRaysCount(Settings.consoleRaysCount);\n\n    return () => raycaster.setRaysCount(previousRaysCount);\n  }, []);\n\n  const height = Math.floor(Settings.consoleHeight);\n\n  useEffect(() => {\n    if (!rays.length) return null;\n\n    const charArray = rays.map((ray) => {\n      const stripHeightCoefficient = 480;\n\n      const charHeight = Math.round(\n        (ray.stripHeight / stripHeightCoefficient) * height\n      );\n      const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n      const charArray = Array.from({ length: normalizedCharHeight }).fill(\n        getCharByStripHeight(normalizedCharHeight, height)\n      );\n\n      const emptyCellsCount = height - normalizedCharHeight;\n\n      const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n      const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n      for (let i = 0; i < topEmptyCellsCount; i++) {\n        charArray.push(\" \");\n      }\n      for (let i = 0; i < bottomEmptyCellsCount; i++) {\n        charArray.unshift(\"_\");\n      }\n\n      return charArray;\n    });\n\n    const rotatedCharArray = rotate(charArray, 270);\n\n    const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n    setRenderedString(str);\n  }, [rays]);\n\n  useEffect(() => {\n    console.log(`\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n`);\n    console.log(renderedString);\n  }, [renderedString]);\n\n  return null;\n};\n\nexport default TextRenderStrategy;\n","import DivRenderStrategy from \"./render-strategies/DivRenderStrategy\";\nimport DivRenderStrategyTextured from \"./render-strategies/DivRenderStrategyTextured\";\nimport TextRenderStrategy from \"./render-strategies/TextRenderStrategy\";\nimport ConsoleRenderStrategy from \"./render-strategies/ConsoleRenderStrategy\";\n\nclass Settings {\n  public static readonly viewPortSizeMultiplier: number = 0.9;\n  public static readonly uiMapSizeMultiplier: number = 0.5;\n\n  public static readonly textRenderCharSpectre: string = \",,:;I&&00%$@@#\";\n  public static readonly viewportWidthToCharsScaleCoefficient = 0.33;\n  public static readonly viewportHeightToCharsScaleCoefficient = 0.166;\n\n  public static readonly consoleRaysCount: number = 100;\n  public static readonly consoleHeight: number = 40;\n\n  public static readonly renderingStrategies: RenderStrategy[] = [\n    { name: \"HTML <div> Shaded\", component: DivRenderStrategy },\n    {\n      name: \"HTML <div> Textured (works ugly)\",\n      component: DivRenderStrategyTextured,\n    },\n    { name: \"HTML <textarea> (Only chrome)\", component: TextRenderStrategy },\n    {\n      name: \"Console in your Chrome (only) browser :D\",\n      component: ConsoleRenderStrategy,\n    },\n  ];\n\n  private constructor() {}\n}\n\nexport default Settings;\n","class Angle {\n  public static toRad = (degrees: number) => (degrees * Math.PI) / 180;\n\n  public static toDeg = (radians: number) => (radians * 180) / Math.PI;\n}\n\nexport default Angle;\n","import { useViewport as useViewportCore } from \"@toolz/use-viewport\";\n\nimport Settings from \"../Settings\";\n\nexport { default as Angle } from \"./angle\";\n\nexport const calculateDistance = (p1: Position, p2: Position): number => {\n  return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);\n};\n\nexport const getCharByStripHeight = (\n  height: number,\n  maxHeight: number\n): string => {\n  const charsSpectre = \",,:;I&&00%$@@#\";\n\n  let key = Math.round((height / maxHeight) * charsSpectre.length);\n  if (key < 0) key = 0;\n  if (key >= charsSpectre.length) key = charsSpectre.length - 1;\n\n  const char = charsSpectre[key];\n\n  return charsSpectre[key];\n};\n\nexport const useViewport = (): { width: number; height: number } => {\n  const viewPort = useViewportCore();\n\n  return {\n    width: Math.round(viewPort.width * Settings.viewPortSizeMultiplier),\n    height: Math.round(viewPort.height * Settings.viewPortSizeMultiplier),\n  };\n};\n","import Raycaster, { usePlayerPosition } from \"../../Raycaster\";\n\nconst PlayerMarker = () => {\n  const position = usePlayerPosition();\n  if (!position) return null;\n\n  const raycaster = Raycaster.getInstance();\n  const size = raycaster.player.radius * 2;\n\n  return (\n    <div\n      className=\"player-marker\"\n      style={{\n        top: position.y / 2,\n        left: position.x / 2,\n      }}\n    >\n      <div\n        className=\"marker-body\"\n        style={{\n          height: size,\n          width: size,\n          top: -raycaster.player.radius,\n          left: -raycaster.player.radius,\n          transform: `rotate(${position.rotation}rad)`,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PlayerMarker;\n","import { FC } from \"react\";\n\nconst Line: FC<{ from: Position; to: Position }> = (props) => {\n  let from = props.from;\n  let to = props.to;\n  if (to.x < from.x) {\n    from = props.to;\n    to = props.from;\n  }\n\n  const len = Math.sqrt(\n    Math.pow(from.x - to.x, 2) + Math.pow(from.y - to.y, 2)\n  );\n  const angle = Math.atan((to.y - from.y) / (to.x - from.x));\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        transform: `translate(${\n          from.x - 0.5 * len * (1 - Math.cos(angle))\n        }px, ${from.y + 0.5 * len * Math.sin(angle)}px) rotate(${angle}rad)`,\n        width: `${len}px`,\n        height: `${0}px`,\n        borderBottom: \"2px solid yellow\",\n      }}\n    />\n  );\n};\n\nexport default Line;\n","import { Fragment } from \"react\";\nimport { useRays, usePlayerPosition } from \"../../Raycaster\";\n\nimport Line from \"./Line\";\n\nconst RayHits = () => {\n  const rays = useRays();\n  const position = usePlayerPosition();\n\n  if (!position) return null;\n\n  return (\n    <Fragment>\n      {rays.map((ray, index) => {\n        if (!ray.hit) return null;\n\n        if (index % 20 !== 0) return null;\n\n        return (\n          <Line\n            key={index}\n            from={{ x: position.x / 2, y: position.y / 2 }}\n            to={{ x: ray.hit.x / 2, y: ray.hit.y / 2 }}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default RayHits;\n","import { Fragment } from \"react\";\n\nimport { useGrid } from \"../../Raycaster\";\n\nimport PlayerMarker from \"./PlayerMarker\";\nimport RayHits from \"./RayHits\";\n\nimport \"./style.scss\";\n\nconst UiMap = () => {\n  const grid = useGrid();\n  if (!grid) return null;\n\n  const tilesSize = grid.tileSize / 2;\n  const rows = grid.data.length;\n  const cols = grid.data[0].length;\n\n  const width = cols * tilesSize;\n  const height = rows * tilesSize;\n\n  return (\n    <div className=\"ui-map\">\n      <div className=\"cell-wrapper\" style={{ width, height }}>\n        <RayHits />\n\n        {grid.data.map((row, i) => (\n          <Fragment key={i}>\n            {row.map((cellType: Cell, j) => {\n              if (cellType === 0) return null;\n\n              return (\n                <div\n                  className=\"cell\"\n                  style={{\n                    top: i * tilesSize,\n                    left: j * tilesSize,\n                    width: tilesSize,\n                    height: tilesSize,\n                  }}\n                  key={j}\n                />\n              );\n            })}\n\n            <PlayerMarker />\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UiMap;\n","import { useEffect, useState } from \"react\";\n\nimport { useViewport } from \"./utils\";\n\nimport Settings from \"./Settings\";\n\nimport Scene from \"./Scene\";\n\nimport UiMap from \"./components/UiMap\";\n\nconst App = () => {\n  const [renderStrategy, setRenderStrategy] = useState<RenderStrategy>(\n    Settings.renderingStrategies[3]\n  );\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    scene.init();\n  }, []);\n\n  const { height, width } = useViewport();\n\n  return (\n    <div className=\"App\">\n      <div className=\"game-view-port\" style={{ width, height }}>\n        {<renderStrategy.component />}\n\n        <UiMap />\n      </div>\n\n      <div>\n        <div>\n          Rendering strategy:{\" \"}\n          <select\n            onChange={(event) => {\n              const strategy = Settings.renderingStrategies.find(\n                (strategy) => strategy.name === event.target.value\n              );\n              setRenderStrategy(strategy);\n            }}\n            value={renderStrategy.name}\n            autoFocus={false}\n          >\n            {Settings.renderingStrategies.map((strategy) => (\n              <option value={strategy.name} key={strategy.name}>\n                {strategy.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"../App\";\n\nimport \"../style/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}