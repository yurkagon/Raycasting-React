{"version":3,"sources":["bootstrap/serviceWorkerRegistration.ts","bootstrap/reportWebVitals.ts","Scene/GameObject.ts","Scene/Scene.ts","Raycaster/Grid.ts","Raycaster/Player/Control.ts","Raycaster/Player/Player.ts","Raycaster/Ray.ts","levels/level1.ts","Raycaster/Raycaster.ts","Raycaster/utils.ts","render-strategies/DivRenderStrategy/DivRenderStrategy.tsx","render-strategies/DivRenderStrategyTextured/wallData.ts","render-strategies/DivRenderStrategyTextured/wall1.jpg","render-strategies/DivRenderStrategyTextured/wall2.jpg","render-strategies/DivRenderStrategyTextured/wall3.jpg","render-strategies/DivRenderStrategyTextured/DivRenderStrategyTextured.tsx","render-strategies/TextRenderStrategy/TextRenderStrategy.tsx","render-strategies/ConsoleRenderStrategy/devtools.jpeg","render-strategies/ConsoleRenderStrategy/ConsoleRenderStrategy.tsx","Settings.ts","utils/angle.ts","utils/index.ts","components/MiniMap/PlayerMarker.tsx","components/MiniMap/Line.tsx","components/MiniMap/RayHits.tsx","components/MiniMap/MiniMap.tsx","App.tsx","bootstrap/index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameObject","started","Scene","getInstance","subscribe","this","subscribers","previousCall","deltaTimeValue","setInterval","update","subscriber","push","index","findIndex","el","splice","forEach","isStarted","start","trackDeltaTime","currentCall","Date","now","instance","Grid","data","tileSize","grid","position","gridPosition","convertPositionToGridPosition","cell","Math","floor","y","x","floatPart","distanceTop","distanceLeft","distanceData","side","value","point","collisionSide","maxBy","Control","onMouseMove","moveState","toForward","toBack","toRight","toLeft","rotateLeft","rotateRight","mouseMoveCallback","attachKeyDown","attachKeyUp","attachMouseMove","document","body","addEventListener","event","code","Settings","allowMouse","valueToRotate","movementX","mouseSensitivity","Player","rotation","walkSpeed","rotationSpeed","radius","control","bind","scene","multiplier","deltaTime","vector","cos","sin","moveBy","multiplier1","multiplier2","newPosition","handleCollision","Ray","angle","isRayFacingDown","isRayFacingUp","isRayFacingRight","isRayFacingLeft","collision","hitDistance","isVerticalCast","isHorizontalCast","stripHeight","maxDistance","player","Angle","normalize","PI","horizontalCollision","castHorizontal","verticalCollision","castVertical","horizontalDistance","calculateDistance","Number","MAX_VALUE","verticalDistance","yIntercept","xIntercept","yStep","xStep","tan","nextHorizontalTouchX","nextHorizontalTouchY","nextVerticalTouchX","nextVerticalTouchY","distance","rayPoint","level","Raycaster","FOV","toRad","raysCount","rays","setData","level1","anglePerRay","startAngle","columnId","ray","cast","count","usePlayerPosition","useState","playerPosition","setPlayerPosition","useEffect","raycaster","unsubscribe","useRays","setRays","DivRenderStrategy","viewport","useViewport","stripWidth","width","className","map","rgbMax","colorValue","limit","height","backgroundColor","style","left","top","wallData","DivRenderStrategyTextured","skyboxEnabled","cn","backgroundPositionX","undefined","textureMove","backgroundImage","backgroundSize","opacity","TextRenderStrategy","previousRaysCount","setRaysCount","consoleRaysCount","viewportWidthToCharsScaleCoefficient","length","viewportHeightToCharsScaleCoefficient","charArray","charHeight","round","normalizedCharHeight","Array","from","fill","getCharByStripHeight","emptyCellsCount","topEmptyCellsCount","ceil","bottomEmptyCellsCount","i","unshift","str","rotate","join","rows","readOnly","ConsoleRenderStrategy","renderedString","setRenderedString","consoleHeight","console","log","clear","src","devtoolsImg","viewPortSizeMultiplier","miniMapSizeMultiplier","textRenderCharSpectre","renderingStrategies","name","component","raysCountChangeAvailable","skybox","default","degrees","toDeg","radians","p1","p2","sqrt","maxHeight","charsSpectre","key","viewPort","useViewportCore","PlayerMarker","size","transform","Line","props","to","len","pow","atan","borderBottom","RayHits","MiniMap","setDataData","setTileSize","useGrid","tilesSize","row","cellType","j","App","fov","setFov","renderStrategy","setRenderStrategy","setAllowMouse","allowMinimap","setAllowMinimap","allowSkybox","setAllowSkybox","init","onChange","strategy","find","target","autoFocus","type","min","max","step","e","checked","id","htmlFor","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df09da3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Scene from \"./Scene\";\n\nabstract class GameObject {\n  private started: boolean = false;\n\n  constructor() {\n    const scene = Scene.getInstance();\n\n    scene.subscribe(this);\n  }\n\n  public start(): void {\n    this.started = true;\n  }\n\n  public abstract update(): void;\n\n  public isStarted() {\n    return this.started;\n  }\n}\n\nexport default GameObject;\n","import GameObject from \"./GameObject\";\n\nimport { Subscriber } from \"./types\";\n\nclass Scene {\n  private subscribers: Subscriber[] = [];\n\n  private previousCall: number;\n  private deltaTimeValue: number = 0;\n\n  public init() {\n    setInterval(() => this.update(), 10);\n  }\n\n  public subscribe(subscriber: Subscriber): void {\n    this.subscribers.push(subscriber);\n  }\n  public unsubscribe(subscriber: Subscriber) {\n    const index = this.subscribers.findIndex((el) => subscriber === el);\n\n    this.subscribers.splice(index, 1);\n  }\n\n  public get deltaTime(): number {\n    return this.deltaTimeValue;\n  }\n\n  private update(): void {\n    this.subscribers.forEach((subscriber) => {\n      if (subscriber instanceof GameObject) {\n        if (!subscriber.isStarted()) subscriber.start();\n\n        subscriber.update();\n      } else {\n        subscriber();\n      }\n    });\n\n    this.trackDeltaTime();\n  }\n\n  private trackDeltaTime(): void {\n    const currentCall = Date.now();\n    if (this.previousCall) {\n      this.deltaTimeValue = (currentCall - this.previousCall) / 1000;\n    }\n\n    this.previousCall = currentCall;\n  }\n\n  private static instance: Scene;\n  public static getInstance(): Scene {\n    if (this.instance) return this.instance;\n\n    this.instance = new Scene();\n\n    return this.instance;\n  }\n}\n\nexport default Scene;\n","import maxBy from \"lodash/maxBy\";\n\nimport { Collision, Side } from \"./types\";\n\nclass Grid {\n  public data: CellGrid = null;\n  public readonly tileSize: number = 32;\n\n  private constructor() {}\n\n  public setData(grid: CellGrid): void {\n    this.data = grid;\n  }\n\n  public handleCollision(position: Position): Collision | null {\n    const gridPosition = this.convertPositionToGridPosition(position);\n\n    const cell =\n      this.data?.[Math.floor(gridPosition.y)]?.[Math.floor(gridPosition.x)];\n\n    const collisionExist = cell !== 0;\n    if (!collisionExist) return null;\n\n    const floatPart = { x: gridPosition.x % 1, y: gridPosition.y % 1 };\n\n    const distanceTop = floatPart.y;\n    const distanceBottom = 1 - distanceTop;\n    const distanceLeft = floatPart.x;\n    const distanceRight = 1 - distanceLeft;\n\n    const distanceData: { side: Side; value: number }[] = [\n      { side: \"top\", value: distanceTop },\n      { side: \"bottom\", value: distanceBottom },\n      { side: \"left\", value: distanceLeft },\n      { side: \"right\", value: distanceRight },\n    ];\n\n    const { side } = maxBy(distanceData, \"value\");\n\n    return {\n      point: position,\n      gridPosition,\n      floatPart,\n      cell,\n      collisionSide: side,\n    };\n  }\n\n  private convertPositionToGridPosition(position: Position): Position {\n    return {\n      x: position.x / this.tileSize,\n      y: position.y / this.tileSize,\n    };\n  }\n\n  private static instance: Grid;\n  public static getInstance(): Grid {\n    if (this.instance) return this.instance;\n\n    this.instance = new Grid();\n\n    return this.instance;\n  }\n}\n\nexport default Grid;\n","import Settings from \"../../Settings\";\n\nimport { ControlConfig, MouseMoveCallback } from \"./types\";\n\nclass Control {\n  public moveState = {\n    toForward: false,\n    toBack: false,\n    toRight: false,\n    toLeft: false,\n    rotateLeft: false,\n    rotateRight: false,\n  };\n\n  private mouseMoveCallback: MouseMoveCallback;\n\n  public constructor({ onMouseMove }: ControlConfig) {\n    this.attachKeyDown();\n    this.attachKeyUp();\n\n    this.mouseMoveCallback = onMouseMove;\n    this.attachMouseMove();\n  }\n\n  private attachKeyDown(): void {\n    document.body.addEventListener(\"keydown\", (event) => {\n      const { code } = event;\n\n      if (code === \"KeyW\") this.moveState.toForward = true;\n      if (code === \"KeyS\") this.moveState.toBack = true;\n      if (code === \"KeyA\") this.moveState.toLeft = true;\n      if (code === \"KeyD\") this.moveState.toRight = true;\n\n      if (code === \"KeyQ\") this.moveState.rotateLeft = true;\n      if (code === \"KeyE\") this.moveState.rotateRight = true;\n    });\n  }\n\n  private attachKeyUp(): void {\n    document.body.addEventListener(\"keyup\", (event) => {\n      const { code } = event;\n\n      if (code === \"KeyW\") this.moveState.toForward = false;\n      if (code === \"KeyS\") this.moveState.toBack = false;\n      if (code === \"KeyA\") this.moveState.toLeft = false;\n      if (code === \"KeyD\") this.moveState.toRight = false;\n\n      if (code === \"KeyQ\") this.moveState.rotateLeft = false;\n      if (code === \"KeyE\") this.moveState.rotateRight = false;\n    });\n  }\n\n  private attachMouseMove(): void {\n    document.addEventListener(\"mousemove\", (event) => {\n      if (!Settings.allowMouse) return;\n\n      const valueToRotate = event.movementX * Settings.mouseSensitivity;\n\n      this.mouseMoveCallback(valueToRotate);\n    });\n  }\n}\n\nexport default Control;\n","import Scene, { GameObject } from \"../../Scene\";\nimport Settings from \"../../Settings\";\nimport Grid from \"../Grid\";\n\nimport Control from \"./Control\";\n\nclass Player extends GameObject {\n  public position: Position = {\n    rotation: -1.884955592153879,\n    x: 372.6884332630978,\n    y: 128.58201781700896,\n  };\n\n  public readonly walkSpeed = 50;\n  public readonly rotationSpeed = 1.3;\n\n  public readonly radius = 8;\n\n  private readonly control: Control;\n\n  private constructor() {\n    super();\n\n    this.control = new Control({ onMouseMove: this.onMouseMove.bind(this) });\n  }\n\n  public update() {\n    const { rotateLeft, rotateRight, toForward, toBack, toRight, toLeft } =\n      this.control.moveState;\n\n    const scene = Scene.getInstance();\n\n    if (rotateLeft || rotateRight) {\n      const multiplier = rotateRight ? 1 : -1;\n\n      this.position = {\n        ...this.position,\n        rotation:\n          this.position.rotation +\n          this.rotationSpeed * multiplier * scene.deltaTime,\n      };\n    }\n\n    if (toForward || toBack) {\n      const multiplier = toForward ? 1 : -1;\n\n      const vector = {\n        x:\n          Math.cos(this.position.rotation) *\n          this.walkSpeed *\n          multiplier *\n          scene.deltaTime,\n        y:\n          Math.sin(this.position.rotation) *\n          this.walkSpeed *\n          multiplier *\n          scene.deltaTime,\n      };\n\n      this.moveBy(vector);\n    }\n\n    if (toRight || toLeft) {\n      const multiplier1 = toRight ? 1 : -1;\n      const multiplier2 = toRight ? -1 : 1;\n\n      const vector = {\n        y:\n          Math.cos(this.position.rotation) *\n          this.walkSpeed *\n          multiplier1 *\n          scene.deltaTime,\n        x:\n          Math.sin(this.position.rotation) *\n          this.walkSpeed *\n          multiplier2 *\n          scene.deltaTime,\n      };\n\n      this.moveBy(vector);\n    }\n  }\n\n  private moveBy(vector: Position): void {\n    const grid = Grid.getInstance();\n\n    const newPosition = {\n      ...this.position,\n      x: this.position.x + vector.x,\n      y: this.position.y + vector.y,\n    };\n\n    if (grid.handleCollision(newPosition)) return;\n\n    this.position = newPosition;\n  }\n\n  private onMouseMove(value: number) {\n    const scene = Scene.getInstance();\n\n    this.position = {\n      ...this.position,\n      rotation: this.position.rotation + value * scene.deltaTime,\n    };\n  }\n\n  private static instance: Player;\n  public static getInstance(): Player {\n    if (this.instance) return this.instance;\n\n    this.instance = new Player();\n\n    return this.instance;\n  }\n}\n\nexport default Player;\n","import { calculateDistance, Angle } from \"../utils\";\n\nimport Grid from \"./Grid\";\nimport Player from \"./Player\";\n\nimport { Collision } from \"./types\";\n\nclass Ray {\n  private readonly point: Position;\n  public readonly angle: number;\n\n  public isRayFacingDown: boolean;\n  public isRayFacingUp: boolean;\n  public isRayFacingRight: boolean;\n  public isRayFacingLeft: boolean;\n\n  public collision?: Collision;\n  public hitDistance?: number;\n  public isVerticalCast: boolean = false;\n  public isHorizontalCast: boolean = false;\n  public stripHeight: number = 0;\n\n  public readonly maxDistance: number = 300;\n\n  private readonly grid: Grid = Grid.getInstance();\n  private readonly player: Player = Player.getInstance();\n\n  constructor(point: Position, angle: number) {\n    this.angle = Angle.normalize(angle);\n    this.point = point;\n\n    this.isRayFacingDown = this.angle > 0 && this.angle < Math.PI;\n    this.isRayFacingUp = !this.isRayFacingDown;\n\n    this.isRayFacingRight =\n      this.angle < 0.5 * Math.PI || this.angle > 1.5 * Math.PI;\n    this.isRayFacingLeft = !this.isRayFacingRight;\n  }\n\n  public cast(): void {\n    const horizontalCollision = this.castHorizontal();\n    const verticalCollision = this.castVertical();\n\n    if (!horizontalCollision && !verticalCollision) return;\n\n    const horizontalDistance = horizontalCollision\n      ? calculateDistance(this.player.position, horizontalCollision.point)\n      : Number.MAX_VALUE;\n    const verticalDistance = verticalCollision\n      ? calculateDistance(this.player.position, verticalCollision.point)\n      : Number.MAX_VALUE;\n\n    if (horizontalDistance < verticalDistance) {\n      this.collision = horizontalCollision;\n      this.hitDistance = horizontalDistance;\n      this.isHorizontalCast = true;\n    } else if (verticalDistance <= horizontalDistance) {\n      this.collision = verticalCollision;\n      this.hitDistance = verticalDistance;\n      this.isVerticalCast = true;\n    }\n\n    const wallCoefficient = 10000;\n    this.stripHeight =\n      wallCoefficient /\n      (Math.cos(Player.getInstance().position.rotation - this.angle) *\n        this.hitDistance);\n  }\n\n  private castHorizontal(): Collision {\n    let yIntercept: number, xIntercept: number, yStep: number, xStep: number;\n\n    yIntercept =\n      Math.floor(this.player.position.y / this.grid.tileSize) *\n      this.grid.tileSize;\n    yIntercept += this.isRayFacingDown ? this.grid.tileSize : 0;\n\n    xIntercept =\n      this.player.position.x +\n      (yIntercept - this.player.position.y) / Math.tan(this.angle);\n\n    yStep = this.grid.tileSize;\n    yStep *= this.isRayFacingUp ? -1 : 1;\n\n    xStep = this.grid.tileSize / Math.tan(this.angle);\n    xStep *= this.isRayFacingLeft && xStep > 0 ? -1 : 1;\n    xStep *= this.isRayFacingRight && xStep < 0 ? -1 : 1;\n\n    let nextHorizontalTouchX = xIntercept;\n    let nextHorizontalTouchY = yIntercept;\n\n    while (\n      nextHorizontalTouchX >= 0 &&\n      nextHorizontalTouchX <= 2000 &&\n      nextHorizontalTouchY >= 0 &&\n      nextHorizontalTouchY <= 2000\n    ) {\n      const collision = this.grid.handleCollision({\n        x: nextHorizontalTouchX,\n        y: nextHorizontalTouchY - (this.isRayFacingUp ? 1 : 0),\n      });\n\n      if (collision) return collision;\n\n      nextHorizontalTouchX += xStep;\n      nextHorizontalTouchY += yStep;\n    }\n  }\n\n  private castVertical(): Collision {\n    let yIntercept: number, xIntercept: number, yStep: number, xStep: number;\n\n    xIntercept =\n      Math.floor(this.player.position.x / this.grid.tileSize) *\n      this.grid.tileSize;\n    xIntercept += this.isRayFacingRight ? this.grid.tileSize : 0;\n\n    yIntercept =\n      this.player.position.y +\n      (xIntercept - this.player.position.x) * Math.tan(this.angle);\n\n    xStep = this.grid.tileSize;\n    xStep *= this.isRayFacingLeft ? -1 : 1;\n\n    yStep = this.grid.tileSize * Math.tan(this.angle);\n    yStep *= this.isRayFacingUp && yStep > 0 ? -1 : 1;\n    yStep *= this.isRayFacingDown && yStep < 0 ? -1 : 1;\n\n    let nextVerticalTouchX = xIntercept;\n    let nextVerticalTouchY = yIntercept;\n\n    while (\n      nextVerticalTouchX >= 0 &&\n      nextVerticalTouchX <= 2000 &&\n      nextVerticalTouchY >= 0 &&\n      nextVerticalTouchY <= 2000\n    ) {\n      const collision = this.grid.handleCollision({\n        x: nextVerticalTouchX - (this.isRayFacingLeft ? 1 : 0),\n        y: nextVerticalTouchY,\n      });\n\n      if (collision) return collision;\n\n      nextVerticalTouchX += xStep;\n      nextVerticalTouchY += yStep;\n    }\n  }\n\n  /*\n    Old variant with \"brute force\" like ray hit checking\n  */\n  private castLegacy() {\n    const checkingDistance = 1 / 2;\n\n    let distance = 0;\n\n    while (distance < this.maxDistance) {\n      const vector: Position = {\n        x: Math.cos(this.angle) * distance,\n        y: Math.sin(this.angle) * distance,\n      };\n\n      const rayPoint: Position = {\n        x: this.point.x + vector.x,\n        y: this.point.y + vector.y,\n      };\n\n      const collision = this.grid.handleCollision(rayPoint);\n\n      if (collision) {\n        this.collision = collision;\n        this.hitDistance = calculateDistance(this.point, rayPoint);\n\n        this.stripHeight =\n          10000 /\n          (Math.cos(Player.getInstance().position.rotation - this.angle) *\n            this.hitDistance);\n\n        break;\n      }\n\n      distance += checkingDistance;\n    }\n  }\n}\n\nexport default Ray;\n","const level: CellGrid = [\n  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2],\n  [2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2],\n  [2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 2],\n  [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2],\n  [1, 3, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 2],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\nexport default level;\n","import { Angle } from \"../utils\";\n\nimport { GameObject } from \"../Scene\";\n\nimport Player from \"./Player\";\nimport Grid from \"./Grid\";\nimport Ray from \"./Ray\";\n\nimport { level1 } from \"../levels\";\n\nclass Raycaster extends GameObject {\n  public FOV: number = Angle.toRad(60);\n  public raysCount: number = 160;\n\n  public player: Player = Player.getInstance();\n  public grid: Grid = Grid.getInstance();\n\n  public rays: Ray[] = [];\n\n  public start() {\n    super.start();\n\n    this.grid.setData(level1);\n  }\n\n  public update() {\n    this.rays = [];\n\n    const anglePerRay = this.FOV / this.raysCount;\n\n    const startAngle = this.player.position.rotation - this.FOV / 2;\n\n    for (let columnId = 0; columnId < this.raysCount; columnId++) {\n      const angle = startAngle + anglePerRay * columnId;\n\n      const ray = new Ray(this.player.position, angle);\n\n      ray.cast();\n\n      this.rays.push(ray);\n    }\n  }\n\n  public setRaysCount(count: number) {\n    this.raysCount = count;\n  }\n\n  private static instance: Raycaster;\n  public static getInstance(): Raycaster {\n    if (this.instance) return this.instance;\n\n    this.instance = new Raycaster();\n\n    return this.instance;\n  }\n}\n\nexport default Raycaster;\n","import { useState, useEffect } from \"react\";\n\nimport Scene from \"../Scene\";\nimport Raycaster from \"./Raycaster\";\nimport Ray from \"./Ray\";\n\nexport const useGrid = () => {\n  const [grid, setDataData] = useState<CellGrid>(null);\n  const [tileSize, setTileSize] = useState<number>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setDataData(raycaster.grid.data);\n      setTileSize(raycaster.grid.tileSize);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  if (!grid) return null;\n\n  return { data: grid, tileSize };\n};\n\nexport const usePlayerPosition = () => {\n  const [playerPosition, setPlayerPosition] = useState<Position>(null);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setPlayerPosition(raycaster.player.position);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return playerPosition;\n};\n\nexport const useRays = () => {\n  const [rays, setRays] = useState<Ray[]>([]);\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    const raycaster = Raycaster.getInstance();\n\n    const subscriber = () => {\n      setRays(raycaster.rays);\n    };\n\n    scene.subscribe(subscriber);\n\n    return () => scene.unsubscribe(subscriber);\n  }, []);\n\n  return rays;\n};\n","import { useViewport, limit } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div className=\"div-render-strategy\">\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        const isShadedSide =\n          ray.collision.collisionSide === \"top\" ||\n          ray.collision.collisionSide === \"right\";\n\n        const rgbMax = isShadedSide ? 170 : 100;\n        const colorValue = limit(\n          (rgbMax * ray.stripHeight) / viewport.height,\n          rgbMax\n        );\n\n        const backgroundColor = `rgb(${colorValue}, ${colorValue}, ${colorValue})`;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n              backgroundColor,\n            }}\n            key={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategy;\n","import wall1 from \"./wall1.jpg\";\nimport wall2 from \"./wall2.jpg\";\nimport wall3 from \"./wall3.jpg\";\n\nconst wallData = {\n  \"1\": wall1,\n  \"2\": wall2,\n  \"3\": wall3,\n};\n\nexport default wallData;\n","export default __webpack_public_path__ + \"static/media/wall1.2598404c.jpg\";","export default __webpack_public_path__ + \"static/media/wall2.c183bd8a.jpg\";","export default __webpack_public_path__ + \"static/media/wall3.708ac57b.jpg\";","import { FC } from \"react\";\nimport cn from \"classnames\";\n\nimport { useViewport } from \"../../utils\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport wallData from \"./wallData\";\n\nimport { Props } from \"./types\";\n\nimport \"./style.scss\";\n\nconst DivRenderStrategyTextured: FC<Props> = ({ skyboxEnabled }) => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  const stripWidth = viewport.width / raycaster.raysCount;\n\n  return (\n    <div\n      className={cn(\n        \"div-render-strategy-textured\",\n        skyboxEnabled ? \"skybox\" : \"gradient\"\n      )}\n      style={\n        skyboxEnabled\n          ? {\n              backgroundPositionX:\n                -raycaster.player.position.rotation * viewport.width,\n            }\n          : undefined\n      }\n    >\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        const float =\n          ray.collision.collisionSide === \"left\" ||\n          ray.collision.collisionSide === \"right\"\n            ? ray.collision.floatPart.y\n            : ray.collision.floatPart.x;\n\n        const textureMove = float * ray.stripHeight;\n\n        return (\n          <div\n            className=\"strip\"\n            style={{\n              width: stripWidth,\n              height: ray.stripHeight,\n              left: stripWidth * index,\n              top: (viewport.height - ray.stripHeight) / 2,\n            }}\n            key={index}\n          >\n            <div\n              className=\"texture\"\n              style={{\n                backgroundImage: `url(${wallData[ray.collision.cell]})`,\n                height: ray.stripHeight,\n                width: ray.stripHeight,\n                backgroundSize: \"cover\",\n                backgroundPositionX: -textureMove,\n                opacity: (ray.stripHeight * 2) / viewport.height,\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DivRenderStrategyTextured;\n","import { useEffect } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { useViewport, getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\n\nimport \"./style.scss\";\n\nconst TextRenderStrategy = () => {\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  useEffect(() => {\n    const previousRaysCount = raycaster.raysCount;\n\n    raycaster.setRaysCount(Settings.consoleRaysCount);\n\n    return () => raycaster.setRaysCount(previousRaysCount);\n  }, []);\n  useEffect(() => {\n    raycaster.setRaysCount(\n      Math.floor(viewport.width * Settings.viewportWidthToCharsScaleCoefficient)\n    );\n  }, [viewport.width]);\n\n  if (!rays.length) return null;\n\n  const height = Math.floor(\n    viewport.height * Settings.viewportHeightToCharsScaleCoefficient\n  );\n\n  const charArray = rays.map((ray) => {\n    const stripHeightCoefficient = 480;\n\n    const charHeight = Math.round(\n      (ray.stripHeight / stripHeightCoefficient) * height\n    );\n    const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n    const charArray = Array.from({ length: normalizedCharHeight }).fill(\n      getCharByStripHeight(normalizedCharHeight, height)\n    );\n\n    const emptyCellsCount = height - normalizedCharHeight;\n\n    const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n    const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n    for (let i = 0; i < topEmptyCellsCount; i++) {\n      charArray.push(\" \");\n    }\n    for (let i = 0; i < bottomEmptyCellsCount; i++) {\n      charArray.unshift(\"_\");\n    }\n\n    return charArray;\n  });\n\n  const rotatedCharArray = rotate(charArray, 270);\n\n  const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n  return (\n    <div className=\"text-render-strategy\">\n      <textarea value={str} rows={height} readOnly />\n    </div>\n  );\n};\n\nexport default TextRenderStrategy;\n","export default __webpack_public_path__ + \"static/media/devtools.39991061.jpeg\";","import { useEffect, useState } from \"react\";\nimport { rotate } from \"2d-array-rotation\";\n\nimport { getCharByStripHeight } from \"../../utils\";\n\nimport Settings from \"../../Settings\";\n\nimport Raycaster, { useRays } from \"../../Raycaster\";\nimport { useViewport } from \"../../utils\";\n\nimport devtoolsImg from \"./devtools.jpeg\";\n\nimport \"./style.scss\";\n\nconst ConsoleRenderStrategy = () => {\n  const [renderedString, setRenderedString] = useState<string>(null);\n\n  const rays = useRays();\n  const raycaster = Raycaster.getInstance();\n\n  const viewport = useViewport();\n\n  useEffect(() => {\n    const previousRaysCount = raycaster.raysCount;\n\n    raycaster.setRaysCount(Settings.consoleRaysCount);\n\n    return () => raycaster.setRaysCount(previousRaysCount);\n  }, []);\n\n  const height = Math.floor(Settings.consoleHeight);\n\n  useEffect(() => {\n    if (!rays.length) return null;\n\n    const charArray = rays.map((ray) => {\n      const stripHeightCoefficient = 480;\n\n      const charHeight = Math.round(\n        (ray.stripHeight / stripHeightCoefficient) * height\n      );\n      const normalizedCharHeight = charHeight > height ? height : charHeight;\n\n      const charArray = Array.from({ length: normalizedCharHeight }).fill(\n        getCharByStripHeight(normalizedCharHeight, height)\n      );\n\n      const emptyCellsCount = height - normalizedCharHeight;\n\n      const topEmptyCellsCount = Math.ceil(emptyCellsCount / 2);\n      const bottomEmptyCellsCount = emptyCellsCount - topEmptyCellsCount;\n\n      for (let i = 0; i < topEmptyCellsCount; i++) {\n        charArray.push(\" \");\n      }\n      for (let i = 0; i < bottomEmptyCellsCount; i++) {\n        charArray.unshift(\"_\");\n      }\n\n      return charArray;\n    });\n\n    const rotatedCharArray = rotate(charArray, 270);\n\n    const str = rotatedCharArray.map((el) => el.join(\"\")).join(\"\\n\");\n\n    setRenderedString(str);\n  }, [rays]);\n\n  useEffect(() => {\n    if (renderedString) console.log(renderedString);\n  }, [renderedString]);\n\n  useEffect(() => {\n    return () => console.clear();\n  }, []);\n\n  return (\n    <div className=\"console-render-strategy\">\n      <div className=\"description\">\n        <h3>Open browser console</h3>\n        <img src={devtoolsImg} width={viewport.width} />\n      </div>\n    </div>\n  );\n};\n\nexport default ConsoleRenderStrategy;\n","import DivRenderStrategy from \"./render-strategies/DivRenderStrategy\";\nimport DivRenderStrategyTextured from \"./render-strategies/DivRenderStrategyTextured\";\nimport TextRenderStrategy from \"./render-strategies/TextRenderStrategy\";\nimport ConsoleRenderStrategy from \"./render-strategies/ConsoleRenderStrategy\";\n\nclass Settings {\n  public static allowMouse: boolean = true;\n\n  public static readonly viewPortSizeMultiplier: number = 0.9;\n  public static readonly miniMapSizeMultiplier: number = 0.5;\n\n  public static readonly textRenderCharSpectre: string = \",,:;I&&00%$@@#\";\n  public static readonly viewportWidthToCharsScaleCoefficient = 0.33;\n  public static readonly viewportHeightToCharsScaleCoefficient = 0.166;\n\n  public static readonly consoleRaysCount: number = 100;\n  public static readonly consoleHeight: number = 40;\n\n  public static readonly mouseSensitivity: number = 0.1;\n\n  public static readonly renderingStrategies: RenderStrategy[] = [\n    {\n      name: \"HTML <div> Textured\",\n      component: DivRenderStrategyTextured,\n      raysCountChangeAvailable: true,\n      skybox: { default: false },\n    },\n    {\n      name: \"HTML <div> Shaded\",\n      component: DivRenderStrategy,\n      raysCountChangeAvailable: true,\n    },\n    { name: \"HTML <textarea> (Only chrome)\", component: TextRenderStrategy },\n    {\n      name: \"Console in your Chrome (only) browser :D\",\n      component: ConsoleRenderStrategy,\n    },\n  ];\n\n  private constructor() {}\n}\n\nexport default Settings;\n","class Angle {\n  public static toRad = (degrees: number) => (degrees * Math.PI) / 180;\n\n  public static toDeg = (radians: number) => (radians * 180) / Math.PI;\n\n  public static normalize(angle: number): number {\n    angle = angle % (2 * Math.PI);\n    if (angle < 0) {\n      angle = 2 * Math.PI + angle;\n    }\n    return angle;\n  }\n}\n\nexport default Angle;\n","import { useViewport as useViewportCore } from \"@toolz/use-viewport\";\n\nimport Settings from \"../Settings\";\n\nexport { default as Angle } from \"./angle\";\n\nexport const calculateDistance = (p1: Position, p2: Position): number => {\n  return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);\n};\n\nexport const getCharByStripHeight = (\n  height: number,\n  maxHeight: number\n): string => {\n  const charsSpectre = \",,:;I&&00%$@@#\";\n\n  let key = Math.round((height / maxHeight) * charsSpectre.length);\n  if (key < 0) key = 0;\n  if (key >= charsSpectre.length) key = charsSpectre.length - 1;\n\n  const char = charsSpectre[key];\n\n  return charsSpectre[key];\n};\n\nexport const useViewport = (): { width: number; height: number } => {\n  const viewPort = useViewportCore();\n\n  return {\n    width: Math.round(viewPort.width * Settings.viewPortSizeMultiplier),\n    height: Math.round(viewPort.height * Settings.viewPortSizeMultiplier),\n  };\n};\n\nexport const limit = (value: number, limit: number): number => {\n  if (value > limit) return limit;\n\n  return value;\n};\n","import Raycaster, { usePlayerPosition } from \"../../Raycaster\";\n\nconst PlayerMarker = () => {\n  const position = usePlayerPosition();\n  if (!position) return null;\n\n  const raycaster = Raycaster.getInstance();\n  const size = raycaster.player.radius * 2;\n\n  return (\n    <div\n      className=\"player-marker\"\n      style={{\n        top: position.y / 2,\n        left: position.x / 2,\n      }}\n    >\n      <div\n        className=\"marker-body\"\n        style={{\n          height: size,\n          width: size,\n          top: -raycaster.player.radius,\n          left: -raycaster.player.radius,\n          transform: `rotate(${position.rotation}rad)`,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PlayerMarker;\n","import { FC } from \"react\";\n\nconst Line: FC<{ from: Position; to: Position }> = (props) => {\n  let from = props.from;\n  let to = props.to;\n  if (to.x < from.x) {\n    from = props.to;\n    to = props.from;\n  }\n\n  const len = Math.sqrt(\n    Math.pow(from.x - to.x, 2) + Math.pow(from.y - to.y, 2)\n  );\n  const angle = Math.atan((to.y - from.y) / (to.x - from.x));\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        transform: `translate(${\n          from.x - 0.5 * len * (1 - Math.cos(angle))\n        }px, ${from.y + 0.5 * len * Math.sin(angle)}px) rotate(${angle}rad)`,\n        width: `${len}px`,\n        height: `${0}px`,\n        borderBottom: \"2px solid yellow\",\n      }}\n    />\n  );\n};\n\nexport default Line;\n","import { Fragment } from \"react\";\nimport { useRays, usePlayerPosition } from \"../../Raycaster\";\n\nimport Line from \"./Line\";\n\nconst RayHits = () => {\n  const rays = useRays();\n  const position = usePlayerPosition();\n\n  if (!position) return null;\n\n  return (\n    <Fragment>\n      {rays.map((ray, index) => {\n        if (!ray.collision) return null;\n\n        if (index % 20 !== 0) return null;\n\n        return (\n          <Line\n            key={index}\n            from={{ x: position.x / 2, y: position.y / 2 }}\n            to={{ x: ray.collision.point.x / 2, y: ray.collision.point.y / 2 }}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default RayHits;\n","import { Fragment } from \"react\";\n\nimport { useGrid } from \"../../Raycaster\";\n\nimport PlayerMarker from \"./PlayerMarker\";\nimport RayHits from \"./RayHits\";\n\nimport \"./style.scss\";\n\nconst MiniMap = () => {\n  const grid = useGrid();\n  if (!grid) return null;\n\n  const tilesSize = grid.tileSize / 2;\n  const rows = grid.data.length;\n  const cols = grid.data[0].length;\n\n  const width = cols * tilesSize;\n  const height = rows * tilesSize;\n\n  return (\n    <div className=\"ui-map\">\n      <div className=\"cell-wrapper\" style={{ width, height }}>\n        <RayHits />\n\n        {grid.data.map((row, i) => (\n          <Fragment key={i}>\n            {row.map((cellType: Cell, j) => {\n              if (cellType === 0) return null;\n\n              return (\n                <div\n                  className=\"cell\"\n                  style={{\n                    top: i * tilesSize,\n                    left: j * tilesSize,\n                    width: tilesSize,\n                    height: tilesSize,\n                  }}\n                  key={j}\n                />\n              );\n            })}\n\n            <PlayerMarker />\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MiniMap;\n","import { useEffect, useState } from \"react\";\n\nimport { useViewport, Angle } from \"./utils\";\n\nimport Settings from \"./Settings\";\n\nimport Scene from \"./Scene\";\nimport Raycaster from \"./Raycaster\";\n\nimport MiniMap from \"./components/MiniMap\";\n\nconst App = () => {\n  const raycaster = Raycaster.getInstance();\n\n  const [fov, setFov] = useState<number>(raycaster.FOV);\n  const [rays, setRays] = useState<number>(raycaster.raysCount);\n\n  const [renderStrategy, setRenderStrategy] = useState<RenderStrategy>(\n    Settings.renderingStrategies[0]\n  );\n\n  const [allowMouse, setAllowMouse] = useState<boolean>(Settings.allowMouse);\n  const [allowMinimap, setAllowMinimap] = useState<boolean>(true);\n  const [allowSkybox, setAllowSkybox] = useState<boolean>(\n    Settings.renderingStrategies[0].skybox.default\n  );\n\n  useEffect(() => {\n    const scene = Scene.getInstance();\n\n    scene.init();\n  }, []);\n  useEffect(() => {\n    raycaster.FOV = fov;\n  }, [fov]);\n  useEffect(() => {\n    Settings.allowMouse = allowMouse;\n  }, [allowMouse]);\n  useEffect(() => {\n    raycaster.raysCount = rays;\n  }, [rays]);\n  useEffect(() => {\n    setRays(raycaster.raysCount);\n  }, [renderStrategy, raycaster]);\n\n  const { height, width } = useViewport();\n\n  return (\n    <div className=\"App\">\n      <div className=\"game-view-port\" style={{ width, height }}>\n        {<renderStrategy.component skyboxEnabled={allowSkybox} />}\n\n        {allowMinimap && <MiniMap />}\n      </div>\n\n      <div className=\"settings\">\n        <div className=\"settings-block\">\n          <div>\n            Rendering strategy:{\" \"}\n            <select\n              onChange={(event) => {\n                const strategy = Settings.renderingStrategies.find(\n                  (strategy) => strategy.name === event.target.value\n                );\n                setRenderStrategy(strategy);\n              }}\n              value={renderStrategy.name}\n              autoFocus={false}\n            >\n              {Settings.renderingStrategies.map((strategy) => (\n                <option value={strategy.name} key={strategy.name}>\n                  {strategy.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            FOV:{\"  \"}\n            <input\n              type=\"range\"\n              min=\"20\"\n              max=\"360\"\n              value={Angle.toDeg(fov)}\n              step=\"10\"\n              onChange={(e) => setFov(Angle.toRad(Number(e.target.value)))}\n            />\n            Value: {Math.round(Angle.toDeg(fov))}° (default: 60°)\n          </div>\n          {renderStrategy.raysCountChangeAvailable && (\n            <div>\n              RAYS:\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"500\"\n                value={rays}\n                step=\"10\"\n                onChange={(e) => setRays(Number(e.target.value))}\n              />\n              Value: {rays} (default: 160)\n            </div>\n          )}\n        </div>\n\n        <div className=\"settings-block\">\n          <div>\n            <input\n              checked={allowMouse}\n              onChange={(e) => setAllowMouse(e.target.checked)}\n              type=\"checkbox\"\n              id=\"allow-mouse\"\n            />\n            <label htmlFor=\"allow-mouse\">Allow mouse</label>\n          </div>\n\n          <div>\n            <input\n              checked={allowMinimap}\n              onChange={(e) => setAllowMinimap(e.target.checked)}\n              type=\"checkbox\"\n              id=\"allow-minimap\"\n            />\n            <label htmlFor=\"allow-minimap\">Allow minimap</label>\n          </div>\n\n          {renderStrategy.skybox && (\n            <div>\n              <input\n                checked={allowSkybox}\n                onChange={(e) => setAllowSkybox(e.target.checked)}\n                type=\"checkbox\"\n                id=\"allow-skybox\"\n              />\n              <label htmlFor=\"allow-skybox\">Skybox</label>\n            </div>\n          )}\n        </div>\n\n        <div className=\"settings-block\">\n          <div>WASD - to move</div>\n          <div>Q and E - to rotate</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"../App\";\n\nimport \"../style/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}